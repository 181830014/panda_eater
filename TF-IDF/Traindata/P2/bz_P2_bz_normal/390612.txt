I have aggregateCollection Mapping like this

JPADynamicTypeBuilder name = new JPADynamicTypeBuilder(
				nameClass, null);
		name.getType().getDescriptor().descriptorIsAggregateCollection();
		
		name.addDirectMapping("firstname", String.class, "FIRSTNAME");
		name.addDirectMapping("lastname", String.class, "LASTNAME");
		
		AggregateCollectionMapping mapping=new AggregateCollectionMapping();
		mapping.setIsPrivateOwned(true);
		mapping.useBasicIndirection();
		
		
		
		DatabaseTable table=new DatabaseTable();
		table.setName("D_NAME");
		mapping.setDefaultSourceTable(table);
		mapping.setReferenceClass(nameClass);
		mapping.setAttributeName("names");
		
		
		//mapping.useListClassName(ArrayList.class.getName());
		mapping.useTransparentList();
		//mapping.setCascadeAll(true);
		DatabaseField fPk=test1.getType().getDescriptor().getPrimaryKeyFields().get(0);
		mapping.addTargetForeignKeyField( new DatabaseField("MAINID"), fPk);
		
		test1.addMapping(mapping);

The collection is persisted successfully when new instance is saved. It is also deleted when owning instance is deleted. But element deletion/modification/addition to the collection is ignored. 

Jamess from email list suggest I should add
name.getType().getDescriptor().setObjectChangePolicy(new DeferredChangeDetectionPolicy());
I did, but modification to collection is still ignored.

He also mentioned "the change tracking type should not be set to
attribute change tracking if any mapping does not support it."


thanks

-jason