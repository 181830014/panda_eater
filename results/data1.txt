Title: Which @NotNull Java annotation should I use?
Description: 
    
    
                    
I'm looking to make my code more readable as well as use tooling like IDE code inspection and/or static code analysis (FindBugs and Sonar) to avoid NullPointerExceptions.  Many of the tools seem incompatible with each others' @NotNull/@NonNull/@Nonnull annotation and listing all of them in my code would be terrible to read.  Any suggestions of which one is the 'best'?  Here is the list of equivalent annotations I've found:


javax.validation.constraints.NotNull
Created for runtime validation, not static analysis.
documentation
edu.umd.cs.findbugs.annotations.NonNull
Used by Findbugs static analysis and therefore Sonar (now Sonarqube)
documentation
javax.annotation.Nonnull
This might work with Findbugs too, but JSR-305 is inactive. (See also: What is the status of JSR 305?)
source
org.jetbrains.annotations.NotNull
Used by IntelliJ IDEA IDE for static analysis.
documentation
lombok.NonNull
Used to control code generation in Project Lombok.
Placeholder annotation since there is no standard.
source, 
documentation
android.support.annotation.NonNull
Marker annotation available in Android, provided by support-annotations package
documentation
org.eclipse.jdt.annotation.NonNull
Used by Eclipse for static code analysis
documentation

    

        
Answer 1: 

    
    
Since JSR 305 (whose goal was to standardize @NonNull and @Nullable) has been dormant for several years, I'm afraid there is no good answer. All we can do is to find a pragmatic solution and mine is as follows:

Syntax

From a purely stylistic standpoint I would like to avoid any reference to IDE, framework or any toolkit except Java itself.

This rules out:


android.support.annotation
edu.umd.cs.findbugs.annotations
org.eclipse.jdt.annotation
org.jetbrains.annotations
org.checkerframework.checker.nullness.qual
lombok.NonNull


Which leaves us with either javax.validation.constraints or javax.annotation.
The former comes with JEE. If this is better than javax.annotation, which  might come eventually with JSE or never at all, is a matter of debate.
I personally prefer javax.annotation because I wouldn't like the JEE dependency.

This leaves us with

javax.annotation

which is also the shortest one.

There is only one syntax which would even be better: java.annotation.Nullable. As other packages graduated
from javax to java in the past, the javax.annotation would
be a step in the right direction.

Implementation

I was hoping that they all have basically the same trivial implementation,
but a detailed analysis showed that this is not true.

First for the similarities:

The @NonNull annotations all have the line 

public @interface NonNull {}


except for 


org.jetbrains.annotations which calls it @NotNull and has a trivial implementation
javax.annotation which has a longer implementation
javax.validation.constraints which also calls it @NotNull and has an implementation


The @Nullableannotations all have the line

public @interface Nullable {}


except for (again) the org.jetbrains.annotations with their trivial implementation.

For the differences:

A striking one is that


javax.annotation
javax.validation.constraints
org.checkerframework.checker.nullness.qual


all have runtime annotations (@Retention(RUNTIME)), while


android.support.annotation
edu.umd.cs.findbugs.annotations
org.eclipse.jdt.annotation
org.jetbrains.annotations


are only compile time (@Retention(CLASS)).

As described in this SO answer the impact of runtime annotations
is smaller than one might think, but they have the benefit
of enabling tools to do runtime checks in addition to the
compile time ones. 

Another important difference is where in the code the annotations can be used.
There are two different approaches. Some packages use JLS 9.6.4.1 style contexts. The following table gives an overview:



                                FIELD   METHOD  PARAMETER LOCAL_VARIABLE 
android.support.annotation      X       X       X   
edu.umd.cs.findbugs.annotations X       X       X         X
org.jetbrains.annotation        X       X       X         X
lombok                          X       X       X         X
javax.validation.constraints    X       X       X   


org.eclipse.jdt.annotation, javax.annotation and org.checkerframework.checker.nullness.qual use the contexts defined in 
JLS 4.11, which is in my opinion the right way to do it.

This leaves us with 


javax.annotation
org.checkerframework.checker.nullness.qual


in this round.

Code

To help you to compare further details yourself I list the code of every annotation below.
To make comparison easier I removed comments, imports and the @Documented annotation.
(they all had @Documented except for the classes from the Android package).
I reordered the lines and @Target fields and normalized the qualifications.

package android.support.annotation;
@Retention(CLASS)
@Target({FIELD, METHOD, PARAMETER})
public @interface NonNull {}




package edu.umd.cs.findbugs.annotations;
@Retention(CLASS)
@Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE})
public @interface NonNull {}




package org.eclipse.jdt.annotation;
@Retention(CLASS)
@Target({ TYPE_USE })
public @interface NonNull {}




package org.jetbrains.annotations;
@Retention(CLASS)
@Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE})
public @interface NotNull {String value() default "";}




package javax.annotation;
@TypeQualifier
@Retention(RUNTIME)
public @interface Nonnull {
    When when() default When.ALWAYS;
    static class Checker implements TypeQualifierValidator&lt;Nonnull&gt; {
        public When forConstantValue(Nonnull qualifierqualifierArgument,
                Object value) {
            if (value == null)
                return When.NEVER;
            return When.ALWAYS;
        }
    }
}




package org.checkerframework.checker.nullness.qual;
@Retention(RUNTIME)
@Target({TYPE_USE, TYPE_PARAMETER})
@SubtypeOf(MonotonicNonNull.class)
@ImplicitFor(
    types = {
        TypeKind.PACKAGE,
        TypeKind.INT,
        TypeKind.BOOLEAN,
        TypeKind.CHAR,
        TypeKind.DOUBLE,
        TypeKind.FLOAT,
        TypeKind.LONG,
        TypeKind.SHORT,
        TypeKind.BYTE
    },
    literals = {LiteralKind.STRING}
)
@DefaultQualifierInHierarchy
@DefaultFor({TypeUseLocation.EXCEPTION_PARAMETER})
@DefaultInUncheckedCodeFor({TypeUseLocation.PARAMETER, TypeUseLocation.LOWER_BOUND})
public @interface NonNull {}




For completeness, here are the @Nullable implementations:

package android.support.annotation;
@Retention(CLASS)
@Target({METHOD, PARAMETER, FIELD})
public @interface Nullable {}




package edu.umd.cs.findbugs.annotations;
@Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE})
@Retention(CLASS)
public @interface Nullable {}




package org.eclipse.jdt.annotation;
@Retention(CLASS)
@Target({ TYPE_USE })
public @interface Nullable {}




package org.jetbrains.annotations;
@Retention(CLASS)
@Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE})
public @interface Nullable {String value() default "";}




package javax.annotation;
@TypeQualifierNickname
@Nonnull(when = When.UNKNOWN)
@Retention(RUNTIME)
public @interface Nullable {}




package org.checkerframework.checker.nullness.qual;
@Retention(RUNTIME)
@Target({TYPE_USE, TYPE_PARAMETER})
@SubtypeOf({})
@ImplicitFor(
    literals = {LiteralKind.NULL},
    typeNames = {java.lang.Void.class}
)
@DefaultInUncheckedCodeFor({TypeUseLocation.RETURN, TypeUseLocation.UPPER_BOUND})
public @interface Nullable {}


The following two packages have no @Nullable, so I list them separately; Lombok has a pretty boring @NonNull.
In javax.validation.constraints the @NonNull is actually a @NotNull
and it has a longish implementation.

package lombok;
@Retention(CLASS)
@Target({FIELD, METHOD, PARAMETER, LOCAL_VARIABLE})
public @interface NonNull {}




package javax.validation.constraints;
@Retention(RUNTIME)
@Target({ FIELD, METHOD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Constraint(validatedBy = {})
public @interface NotNull {
    String message() default "{javax.validation.constraints.NotNull.message}";
    Class&lt;?&gt;[] groups() default { };
    Class&lt;? extends Payload&gt;[] payload() default {};
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        NotNull[] value();
    }
}




Support

From my experience, javax.annotation is at least supported by Eclipse and the Checker Framework out of the box.

Summary

My ideal annotation would be the java.annotation syntax with the Checker Framework implementation.

If you don't intend to use the Checker Framework the javax.annotation (JSR-305) is still your best bet for the time being.

If you are willing to buy into the Checker Framework just use
their org.checkerframework.checker.nullness.qual.



Sources


android.support.annotation from android-5.1.1_r1.jar
edu.umd.cs.findbugs.annotations from findbugs-annotations-1.0.0.jar
org.eclipse.jdt.annotation from org.eclipse.jdt.annotation_2.1.0.v20160418-1457.jar
org.jetbrains.annotations from jetbrains-annotations-13.0.jar
javax.annotation from gwt-dev-2.5.1-sources.jar
org.checkerframework.checker.nullness.qual from checker-framework-2.1.9.zip
lombok from lombok commit f6da35e4c4f3305ecd1b415e2ab1b9ef8a9120b4
javax.validation.constraints from validation-api-1.0.0.GA-sources.jar

    
    
Answer 2: 

    
    
I very much like the Checker Framework, which is an implementation of type annotations (JSR-308) which is used to implement defect checkers like a nullness checker.  I haven't really tried any others to offer any comparison, but I've been happy with this implementation.

I'm not affiliated with the group that offers the software, but I am a fan.

Four things I like about this system:


It has a defect checkers for nullness (@Nullable), but also has ones for immutability and interning (and others).  I use the first one (nullness) and I'm trying to get into using the second one (immutability/IGJ).  I'm trying out the third one, but I'm not certain about using it long term yet.  I'm not convinced of the general usefulness of the other checkers yet, but its nice to know that the framework itself is a system for implementing a variety of additional annotations and checkers.
The default setting for nullness checking works well: Non-null except locals (NNEL).  Basically this means that by default the checker treats everyhing (instance variables, method parameters, generic types, etc) except local variables as if they have a @NonNull type by default.  Per the documentation:


  The NNEL default leads to the smallest number of explicit annotations in your code.


You can set a different default for a class or for a method if NNEL doesn't work for you.
This framework allows you to use with without creating a dependency on the framework by enclosing your annotations in a comment: e.g. /*@Nullable*/.  This is nice because you can annotate and check a library or shared code, but still be able to use that library/shared coded in another project that doesn't use the framework.  This is a nice feature.  I've grown accustom to using it, even though I tend to enable the Checker Framework on all my projects now. 
The framework has a way to annotate APIs you use that aren't already annotated for nullness by using stub files.

    
    
Answer 3: 

    
    
I use the IntelliJ one, because I'm mostly concerned with IntelliJ flagging things that might produce a NPE. I agree that it's frustrating not having a standard annotation in the JDK. There's talk of adding it, it might make it into Java 7. In which case there will be one more to choose from!
    
    
Answer 4: 

    
    
According to the Java 7 features list JSR-308 type annotations are deferred to Java 8.  JSR-305 annotations are not even mentioned.  

There is a bit of info on the state of JSR-305 in an appendix of the latest JSR-308 draft.  This includes the observation that JSR-305 annotations seem to be abandoned.  The JSR-305 page also shows it as "inactive".

In the mean time, the pragmatic answer is to use the annotation types that are supported by the most widely used tools ... and be prepared to change them if the situation changes.



In fact, JSR-308 does not define any annotation types/classes, and it looks like they think it is out of scope.  (And they are right, given the existence of JSR-305).

However, if JSR-308 really looks like making it into Java 8, it wouldn't surprise me if interest in JSR-305 revived.  AFAIK, the JSR-305 team hasn't formally abandoned their work.  They have just been quiet for 2+ years.

It is interesting that Bill Pugh (the tech lead for JSR-305) is one of the guy behind FindBugs.
    
    
Answer 5: 

    
    
For Android projects you should use android.support.annotation.NonNull and android.support.annotation.Nullable. These and other helpful Android-specific annotations are available in the Support Library.

From http://tools.android.com/tech-docs/support-annotations:


  The support library itself has also been annotated with these
  annotations, so as a user of the support library, Android Studio will
  already check your code and flag potential problems based on these
  annotations.

    
    
Answer 6: 

    
    
If anyone is just looking for the IntelliJ classes: you can get them from the maven repository with

&lt;dependency&gt;
    &lt;groupId&gt;org.jetbrains&lt;/groupId&gt;
    &lt;artifactId&gt;annotations&lt;/artifactId&gt;
    &lt;version&gt;15.0&lt;/version&gt;
&lt;/dependency&gt; 

    
    
Answer 7: 

    
    
JSR305 and FindBugs are authored by the same person. Both are poorly maintained but are as standard as it gets and are supported by all major IDEs. The good news is that they work well as-is.

Here is how to apply @Nonnull to all classes, methods and fields by default.
See https://stackoverflow.com/a/13319541/14731 and https://stackoverflow.com/a/9256595/14731


Define @NotNullByDefault




import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import javax.annotation.Nonnull;
import javax.annotation.meta.TypeQualifierDefault;


    /**
     * This annotation can be applied to a package, class or method to indicate that the class fields,
     * method return types and parameters in that element are not null by default unless there is: &lt;ul&gt;
     * &lt;li&gt;An explicit nullness annotation &lt;li&gt;The method overrides a method in a superclass (in which
     * case the annotation of the corresponding parameter in the superclass applies) &lt;li&gt; there is a
     * default parameter annotation applied to a more tightly nested element. &lt;/ul&gt;
     * &lt;p/&gt;
     * @see https://stackoverflow.com/a/9256595/14731
     */
    @Documented
    @Nonnull
    @TypeQualifierDefault(
    {
        ElementType.ANNOTATION_TYPE,
        ElementType.CONSTRUCTOR,
        ElementType.FIELD,
        ElementType.LOCAL_VARIABLE,
        ElementType.METHOD,
        ElementType.PACKAGE,
        ElementType.PARAMETER,
        ElementType.TYPE
    })
    @Retention(RetentionPolicy.RUNTIME)
    public @interface NotNullByDefault
    {
    }


2. Add the annotation to each package: package-info.java



@NotNullByDefault
package com.example.foo;


UPDATE: As of December 12th, 2012 JSR 305 is listed as "Dormant". According to the documentation:


  A JSR that was voted as "dormant" by the Executive Committee, or one that has reached the end of its natural lifespan.


It looks like JSR 308 is making it into JDK 8 and although the JSR does not define @NotNull, the accompanying Checkers Framework does. At the time of this writing, the Maven plugin is unusable due to this bug: https://github.com/typetools/checker-framework/issues/183
    
    
Answer 8: 

    
    
Distinguish between static analysis and runtime analysis. Use static analysis for internal stuff, and runtime analysis for the public boundaries of your code.

For things that should not be null:


Runtime check: Use "if (x == null) ..." (zero dependency) or @javax.validation.NotNull (with bean validation) or @lombok.NonNull (plain and simple) or guavas Preconditions.checkNotNull(...)


Use Optional for method return types (only). Either Java8 or Guava.

Static check: Use an @NonNull annotation
Where it fits, use  @...NonnullByDefault annotations on class or package level. Create these annotations yourself (examples are easy to find).


Else, use @...CheckForNull on method returns to avoid NPEs



This should give the best result: warnings in the IDE, errors by Findbugs and checkerframework, meaningful runtime exceptions.

Do not expect static checks to be mature, their naming is not standardized and different libraries and IDEs treat them differently, ignore them. The JSR305 javax.annotations.* classes look like standard, but they are not, and they cause split packages with Java9+.

Some notes explanations:


Findbugs/spotbugs/jsr305 annotations with package javax.validation.* clash with other modules in Java9+, also possibly violate Oracle license
Spotbugs annotations still depends on jsr305/findbugs annotations at compiletime (at the time of writing https://github.com/spotbugs/spotbugs/issues/421)
jetbrains @NotNull name conflicts with @javax.validation.NotNull.
jetbrains, eclipse or checkersframework annotations for static checking have the advantage over javax.annotations that they do not clash with other modules in Java9 and higher
@javax.annotations.Nullable does not mean to Findbugs/Spotbugs what you (or your IDE) think it means. Findbugs will ignore it (on members). Sad, but true (https://sourceforge.net/p/findbugs/bugs/1181)
For static checking outside an IDE, 2 free tools exist: Spotbugs(formerly Findbugs) and checkersframework.
The Eclipse library has @NonNullByDefault, jsr305 only has @ParametersAreNonnullByDefault. Those are mere convenience wrappers applying base annotations to everything in a package (or class), you can easily create your own. This can be used on package. This may conflict with generated code (e.g. lombok).
Using lombok as an exported dependency should be avoided for libraries that you share with other people, the less transitive dependencies, the better
Using Bean validation framework is powerful, but requires high overhead, so that's overkill just to avoid manual null checking.
Using Optional for fields and method parameters is controversial (you can find articles about it easily)
Android null annotations are part of the Android support library, they come with a whole lot of other classes, and don't play nicely with other annotations/tools


Before Java9, this is my recommendation:

// file: package-info.java
@javax.annotation.ParametersAreNonnullByDefault
package example;


// file: PublicApi
package example;

public interface PublicApi {

    Person createPerson(
        // NonNull by default due to package-info.java above
        String firstname,
        String lastname);
}

// file: PublicApiImpl
public class PublicApiImpl implements PublicApi {
    public Person createPerson(
            // In Impl, handle cases where library users still pass null
            @Nullable String firstname, // Users  might send null
            @Nullable String lastname // Users might send null
            ) {
        if (firstname == null) throw new IllagalArgumentException(...);
        if (lastname == null) throw new IllagalArgumentException(...);
        return doCreatePerson(fistname, lastname, nickname);
    }

    @NonNull // Spotbugs checks that method cannot return null
    private Person doCreatePerson(
             String firstname, // Spotbugs checks null cannot be passed, because package has ParametersAreNonnullByDefault
             String lastname,
             @Nullable String nickname // tell Spotbugs null is ok
             ) {
         return new Person(firstname, lastname, nickname);
    }

    @CheckForNull // Do not use @Nullable here, Spotbugs will ignore it, though IDEs respect it
    private Person getNickname(
         String firstname,
         String lastname) {
         return NICKNAMES.get(firstname + ':' + lastname);
    }
}


Note that there is no way to make Spotbugs raise a warning when a nullable method parameter is dereferenced (at the time of writing, version 3.1 of Spotbugs). Maybe checkerframework can do that.

Sadly these annotations do not distinguish between the cases of a public method of a library with arbitrary callsites, and non-public methods where each callsite can be known. So the double meaning of: "Indicate that null is undesired, but prepare for null being passed nevertheless" is not possible in a single declaration, hence the above example has different annotations for the interface and the implementation.

For cases where the split interface approach is not practical, the following approach is a compromise:

        public Person createPerson(
                @NonNull String firstname,
                @NonNull String lastname
                ) {
            // even though parameters annotated as NonNull, library clients might call with null.
            if (firstname == null) throw new IllagalArgumentException(...);
            if (lastname == null) throw new IllagalArgumentException(...);
            return doCreatePerson(fistname, lastname, nickname);
        }


This helps clients to not pass null (writing correct code), while returning useful errors if they do.
    
    
Answer 9: 

    
    
Eclipse has also its own annotations.

org.eclipse.jdt.annotation.NonNull


See at http://wiki.eclipse.org/JDT_Core/Null_Analysis for details.
    
    
Answer 10: 

    
    
Just pointing out that the Java Validation API (javax.validation.constraints.*) doesn't come with a @Nullable annotation, which is very valuable in a static analysis context. It makes sense for runtime bean validation as this is the default for any non-primitive field in Java (i.e. nothing to validate/enforce). For the purposes stated that should weigh towards the alternatives.
    
    
Answer 11: 

    
    
Unfortunately, JSR 308 will not add more values than this project local Not Null suggestion here

Java 8 will not come with a single default annotation or its own Checker framework.
Similar to Find-bugs or JSR 305, this JSR is poorly maintained by a small bunch of mostly academic teams. 

No commercial power behind it, thus JSR 308 launches EDR 3 (Early Draft Review at JCP) NOW, while Java 8 is supposed to ship in less than 6 months:-O
Similar to 310 btw. but unlike 308 Oracle has taken charge of that now away from its founders to minimize harm it'll do to the Java Platform.

Every project, vendor and academic class like the ones behind the Checker Framework and JSR 308 will create its own proprietary checker annotation.

Making source code incompatible for years to come, until a few popular compromises could be found and maybe added to Java 9 or 10, or via frameworks like Apache Commons or Google Guava;-)
    
    
Answer 12: 

    
    
Android

This answer is Android specific. Android has support package called support-annotations. This provides dozens of Android specific annotations and also provides common ones like NonNull, Nullable etc.

To add support-annotations package, add the following dependency in your build.gradle:

compile 'com.android.support:support-annotations:23.1.1'


and then use:

import android.support.annotation.NonNull;

void foobar(@NonNull Foo bar) {}

    
    
Answer 13: 

    
    
While waiting for this to be sorted out upstream (Java 8?), you could also just define your own project-local @NotNull and @Nullable annotations. This can be useful also in case you're working with Java SE, where javax.validation.constraints isn't available by default.

import java.lang.annotation.*;

/**
 * Designates that a field, return value, argument, or variable is
 * guaranteed to be non-null.
 */
@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE})
@Documented
@Retention(RetentionPolicy.CLASS)
public @interface NotNull {}

/**
 * Designates that a field, return value, argument, or variable may be null.
 */
@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE})
@Documented
@Retention(RetentionPolicy.CLASS)
public @interface Nullable {}


This would admittedly largely be for decorative or future-proofing purposes, since the above obviously doesn't in and of itself add any support for the static analysis of these annotations.
    
    
Answer 14: 

    
    
If you're developing for android, you're somewhat tied to Eclipse (edit: at time of writing, not anymore), which has its own annotations.  It's included in Eclipse 3.8+ (Juno), but disabled by default.

You can enable it at Preferences 
Answer 15: 

    
    
If you are working on a big project, you may be better of creating your own @Nullable and/or @NotNull annotations.
For example:
@java.lang.annotation.Documented
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS)
@java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD,
                              java.lang.annotation.ElementType.METHOD,    
                              java.lang.annotation.ElementType.PARAMETER,
                              java.lang.annotation.ElementType.LOCAL_VARIABLE})
public @interface Nullable 
{
}

If you use the correct retention policy, then the annotations won't be available at runtime. From that point of view, it is just an internal thing.
Even though this is not a strict science, I think it makes most sense to use an internal class for it.

It is an internal thing. (no functional or technical impact)
With many many many usages.
IDE's like IntelliJ support custom @Nullable/@NotNull annotations.
Most frameworks prefer to use their own internal version as well.

Additional Questions (see comments):
How to configure this in IntelliJ ?

Click the &quot;police officer&quot; in the lower right corner of the IntelliJ status bar. And click &quot;Configure inspections&quot; in the popup. Next ...


    
    
Answer 16: 

    
    
There are already too many answers here, but (a) it's 2019, and there's still no "standard" Nullable and (b) no other answer references Kotlin.

The reference to Kotlin is important, because Kotlin is 100% interoperable with Java and it has a core Null Safety feature. When calling Java libraries, it can take advantage of those annotations to let Kotlin tools know if a Java API can accept or return null.

As far as I know, the only Nullable packages compatible with Kotlin are org.jetbrains.annotations and android.support.annotation (now androidx.annotation). The latter is only compatible with Android so it can't be used in non-Android JVM/Java/Kotlin projects. However, the JetBrains package works everywhere.

So if you develop Java packages that should also work in Android and Kotlin (and be supported by Android Studio and IntelliJ), your best choice is probably the JetBrains package.

Maven:

&lt;dependency&gt;
    &lt;groupId&gt;org.jetbrains&lt;/groupId&gt;
    &lt;artifactId&gt;annotations-java5&lt;/artifactId&gt;
    &lt;version&gt;15.0&lt;/version&gt;
&lt;/dependency&gt;


Gradle:

implementation 'org.jetbrains:annotations-java5:15.0'

    
    
Answer 17: 

    
    
There is another way to do this in Java 8.
I am doing 2 things to accomplish what I needed:

Making nullable fields explicit with types by wrapping nullable fields with java.util.Optional
Checking that all non nullable fields are not null at construction time with java.util.Objects.requireNonNull

Example:
Edit: Disregard this 1st example, I'm just leaving here as context of the comments conversation. Skip to recommended option after this (2nd code block).
    import static java.util.Objects.requireNonNull;

    public class Role {

      private final UUID guid;
      private final String domain;
      private final String name;
      private final Optional&lt;String&gt; description;

      public Role(UUID guid, String domain, String name, Optional&lt;String&gt; description) {
        this.guid = requireNonNull(guid);
        this.domain = requireNonNull(domain);
        this.name = requireNonNull(name);
        this.description = requireNonNull(description);
      }

So my question is, do we even need to annotate when using java 8?
Edit: I found out later that some consider a bad practice to use Optional in arguments, there is a good discussion with pros and cons here Why should Java 8&#39;s Optional not be used in arguments
Recommended option given that it is not best practice to use Optional in arguments, we need 2 constructors:
  //Non null description
  public Role(UUID guid, String domain, String name, String description) {
        this.guid = requireNonNull(guid);
        this.domain = requireNonNull(domain);
        this.name = requireNonNull(name);

        // description will never be null
        requireNonNull(description);

        // but wrapped with an Optional
        this.description = Optional.of(description);
      }

  // Null description is assigned to Optional.empty
  public Role(UUID guid, String domain, String name) {
        this.guid = requireNonNull(guid);
        this.domain = requireNonNull(domain);
        this.name = requireNonNull(name);
        this.description = Optional.empty();
      }

    
    
Answer 18: 

    
    
If you are building your application using Spring Framework I would suggest using javax.validation.constraints.NotNull comming from Beans Validation  packaged in following dependency:

    &lt;dependency&gt;
        &lt;groupId&gt;javax.validation&lt;/groupId&gt;
        &lt;artifactId&gt;validation-api&lt;/artifactId&gt;
        &lt;version&gt;1.1.0.Final&lt;/version&gt;
    &lt;/dependency&gt;


The main advantage of this annotation is that Spring provides support for both method parameters and class fields annotated with javax.validation.constraints.NotNull. All you need to do to enable support is:


supply the api jar for beans validation and jar with implementation of validator of jsr-303/jsr-349 annotations (which comes with Hibernate Validator 5.x dependency):

&lt;dependency&gt;
    &lt;groupId&gt;javax.validation&lt;/groupId&gt;
    &lt;artifactId&gt;validation-api&lt;/artifactId&gt;
    &lt;version&gt;1.1.0.Final&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
    &lt;version&gt;5.4.1.Final&lt;/version&gt;
&lt;/dependency&gt;

provide MethodValidationPostProcessor to spring's context

  @Configuration
  @ValidationConfig
  public class ValidationConfig implements MyService {

        @Bean
        public MethodValidationPostProcessor providePostProcessor() {
              return new MethodValidationPostProcessor()
        }
  }

finally you annotate your classes with Spring's org.springframework.validation.annotation.Validated and validation will be automatically handled by Spring.


Example:

@Service
@Validated
public class MyServiceImpl implements MyService {

  @Override
  public Something doSomething(@NotNull String myParameter) {
        // No need to do something like assert myParameter != null  
  }
}


When you try calling method doSomething and pass null as the parameter value, spring (by means of HibernateValidator) will throw ConstraintViolationException. No need for manuall work here.

You can also validate return values.

Another important benefit of javax.validation.constraints.NotNull comming for Beans Validation Framework is that at the moment it is still developed and new features are planned for new version 2.0.

What about @Nullable? There is nothing like that in Beans Validation 1.1. Well, I could arguee that if you decide to use @NotNull than everything which is NOT annotated with @NonNull is effectively "nullable", so the @Nullable annotation is useless.
    
    
Answer 19: 

    
    
Doesn't sun have their own now? What's this:
http://www.java2s.com/Open-Source/Java-Document/6.0-JDK-Modules-com.sun/istack/com.sun.istack.internal.htm

This seems to be packaged with all the versions of Java I've used within the last few years.

Edit: As mentioned in the comments below, you probably don't want to use these. In that case, my vote is for the IntelliJ jetbrains annotations!
    
    
Answer 20: 

    
    
One of the nice things about IntelliJ is that you don't need to use their annotations. You can write your own, or you can use those of whatever other tool you like. You're not even limited to a single type. If you're using two libraries that use different @NotNull annotations, you can tell IntelliJ to use both of them. To do this, go to "Configure Inspections", click on the "Constant Conditions &amp; Exceptions" inspection, and hit the "Configure inspections" button. I use the Nullness Checker wherever I can, so I set up IntelliJ to use those annotations, but you can make it work with whatever other tool you want. (I have no opinion on the other tools because I've been using IntelliJ's inspections for years, and I love them.)
    
    
Answer 21: 

    
    
Another option is the annotations provided with ANTLR 4. Following Pull Request #434, the artifact containing the @NotNull and @Nullable annotations includes an annotation processor that produces compile-time errors and/or warnings in the event one of these attributes is misused (for example, if both are applied to the same item, or if @Nullable is applied to item with a primitive type). The annotation processor provides additional assurance during the software development process that the information conveyed by the application of these annotations is accurate, including in cases of method inheritance.
    
    
Answer 22: 

    
    
Spring 5 has @NonNullApi at the package level. This seems like a convenient choice for a project that already has Spring dependencies. All fields, parameters and return values default to @NonNull and @Nullable can be applied in the few places that differ.

File package-info.java:

@org.springframework.lang.NonNullApi
package com.acme;


https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.nullability.annotations
    
    
Title: What is the shortcut to Auto import all in Android Studio?
Description: 
    
    
                    
Is there any way of auto importing (like in Eclipse Shift+Ctrl+O) in Android Studio? 

I have found only Ctrl+Alt+O which ask for each thing, and I have to press Alt+Enter to accept it.

No way to do it faster?
    

        
Answer 1: 

    
    
For Windows/Linux, you can go to File -code/code
Answer 2: 

    
    
These are the shortcuts used in Android studio

Go to class CTRL + N
Go to file CTRL + Shift + N
Navigate open tabs ALT + Left-Arrow; ALT + Right-Arrow
Look up recent files CTRL + E
Go to line CTRL + G
Navigate to last edit location CTRL + SHIFT + BACKSPACE
Go to declaration CTRL + B
Go to implementation CTRL + ALT + B
Go to source F4
Go to super Class CTRL + U
Show Call hierarchy CTRL + ALT + H
Search in path/project CTRL + SHIFT + F   

Programming Shortcuts:-

Reformat code CTRL + ALT + L
Optimize imports CTRL + ALT + O
Code Completion CTRL + SPACE
Issue quick fix ALT + ENTER
Surround code block CTRL + ALT + T
Rename and Refractor Shift + F6
Line Comment or Uncomment CTRL + /
Block Comment or Uncomment CTRL + SHIFT + /
Go to previous/next method ALT + UP/DOWN
Show parameters for method CTRL + P
Quick documentation lookup CTRL + Q
Delete a line CTRL + Y
View declaration in layout CTRL + B   

For more info visit Things worked in Android
    
    
Answer 3: 

    
    
By changing the keymaps settings you can use the same keyboard short cuts as in Eclipse (Or your favourite IDE)

File -
Answer 4: 

    
    

Android Studio --&gt; Preferences --&gt; Editors --&gt; Auto Import


Checked Optimize imports on the fly option
Checked to Add unambiguous imports on the fly option
Click Apply and OK button.

    
    
Answer 5: 

    
    
Note that in my Android Studio 1.4, Auto Import now under General 


  (Android Studio --
Answer 6: 

    
    
You can make short cut key for missing import in android studio which you like


Click on file Menu
Click on Settting
click on key map
Search for "auto-import"
double click on auto import and select add keyboard short cut key
that's all









  Note: You can import single missing import using alt+enter which shown in pop up



    
    
Answer 7: 

    
    
On Windows, highlight the code that has classes which need to be resolved and hit Alt+Enter
    
    
Answer 8: 

    
    

  Go to File -
Answer 9: 

    
    
For Linux (Ubuntu 14.04), you can go to 

File -
Answer 10: 

    
    
In the Latest Version of Android Studio, the options for Auto-Import is enabled by default, so kudos no need to worry about that.

On Windows:
If for some reasons auto-import is not enable you can go to settings by typing shortcut: Ctrl+Alt+S.

In the Search term just type 'Auto-Import' and then select 'Add unambiguous Imports on the fly' and click Ok.

That's it. You are Done.
SnapShot of Auto_import
    
    
Answer 11: 

    
    
File 
Title: How do I &ldquo;Add Existing Item&rdquo; an entire directory structure in Visual Studio?
Description: 
    
    
                    
I have a free standing set of files not affiliated with any C# project at all that reside in a complicated nested directory structure.

I want to add them in that format to a different directory in an ASP.NET web application I am working on; while retaining the same structure. So, I copied the folder into the target location of my project and I tried to “add existing  item” only to lose the previous folder hierarchy.

Usually I have re-created the directories by hand, copied across on a one-to-one basis, and then added existing items. There are simply too many directories/items in this case.

So how do you add existing directories and files in Visual Studio 2008?
    

        
Answer 1: 

    
    
Drag the files / folders from Windows Explorer into the Solution Explorer. It will add them all. Note this doesn't work if Visual Studio is in Administrator Mode, because Windows Explorer is a User Mode process.
    
    
Answer 2: 

    
    
Enable "Show All Files" for the specific project (you might need to hit "Refresh" to see them)**.  

The folders/files that are not part of your project appear slightly "lighter" in the project tree.  

Right click the folders/files you want to add and click "Include In Project". It will recursively add folders/files to the project.

** These buttons are located on the mini Solution Explorer toolbar.

** Make sure you are NOT in debug mode.
    
    
Answer 3: 

    
    
In Solution Explorer:


Click Show All Files (second icon from the left at the top of Solution Explorer).
Locate the folder you want to add.
Right-click and select "Include in Project"


I use this to install add-ons like HTML editors and third-party file browsers.
    
    
Answer 4: 

    
    
I just want to point out that two of the solutions offered previously,


Drag and drop from Windows Explorer
Show All Files and then include in project.


do not do what the question asked for:

Include in project while preserving the directory structure.

At least not in my case (C++/CLI project Visual Studio 2013 on Windows&nbsp;7).

In Visual Studio, once you are back in the normal view (not Show All Files), the files you added are all listed at the top level of the project.

Yes, on disk they still reside where they were, but in Solution Explorer they are loose.

I did not find a way around it except recreating the directory structure in Solution Explorer and then doing Add Existing Items at the right location.
    
    
Answer 5: 

    
    
I didn't immediately understand this based upon these descriptions but here is what I finally stumbled on:


Turn on "Show All Files" - there is an icon on the Solution Explorer toolbar
Using Windows Explorer (not solution explorer), move your files into the directory structure where you want them to reside
Click "Refresh" also on the Solution Explorer toolbar
The files that you've moved should be visible "ghosted" in the Solution Explorer tree structure where you've placed them
Right click on your ghosted files or folders and click "Include in Project". All the contents of a folder will be included

    
    
Answer 6: 

    
    
Below is the icon for the 'Show All Files', just for easy reference. 


    
    
Answer 7: 

    
    


Click above in the red circle. Your folder will appear in Solution Explorer.

Right click on your folder -em/em/p/div
Answer 8: 

    
    
You can change your project XML to add existing subfolders and structures automatically into your project like "node_modules" from NPM:

This is for older MSBuild / Visual Studio versions

&lt;ItemGroup&gt;
   &lt;Item Include="$([System.IO.Directory]::GetFiles(&amp;quot;$(MSBuildProjectDirectory)\node_modules&amp;quot;,&amp;quot;*&amp;quot;,SearchOption.AllDirectories))"&gt;&lt;/Item&gt;
&lt;/ItemGroup&gt;


For the current MSBuild / Visual Studio versions:

Just put it in the nodes of the xml:

&lt;Project&gt;
&lt;/Project&gt;


In this case just change $(MSBuildProjectDirectory)\node_modules to your folder name.
    
    
Answer 9: 

    
    
You need to put your directory structure in your project directory. And then click "Show All Files" icon in the top of Solution Explorer toolbox. After that, the added directory will be shown up. You will then need to select this directory, right click, and choose "Include in Project."
    
    
Answer 10: 

    
    
This is what I do:


Right click on solution -
Answer 11: 

    
    
At last, Visual Studio 2017 allows the user to import an entire directory with a single click. Visual&nbsp;Studio&nbsp;2017 has a new functionality "Open Folder" that allows opening the entire folder, even without the need to save it as solution. The source code can be imported using the following methods.


Menu File → Open → *Folder (Ctrl + Shift + O)
devenv.exe  &lt;source folder&gt;


It even supports building and debugging CMake projects.

Bring your C++ codebase to Visual Studio with “Open Folder”
    
    
Answer 12: 

    
    
There is now an open-source extension in the Marketplace that seems to do what the OP was asking for:

Folder To Solution Folder



If it doesn't do exactly what you want, the code is available, so you can modify it to suit your scenario.

HTH
    
    
Answer 13: 

    
    
A neat trick I discovered is that if you go to "Add existing...", you can drag the folder from the open dialog to your solution.

I have my Visual Studio to open in Admin Mode automatically, so this was a good workaround for me as I didn't want to have to undo that just to get this to work.
    
    
Answer 14: 

    
    
What worked for me was to drag the folder into Visual Studio, then right click the folder and select "Open Folder in File Explorer". Then select all and drag them into the folder in Visual Studio.
    
    
Answer 15: 

    
    
In Windows 7 you could do the following:

Right click on your project and select "Add-code/codecode/code/p/div
Answer 16: 

    
    
The cleanest way that I've found to do this is to create a new Class Library project in the target folder, and redirect all of its build output elsewhere.  It still leaves a .csproj file sitting in that folder, but it does let you see it in Visual Studio and pick which files to include in your project.
    
    
Answer 17: 

    
    
It has been a while since this was originally posted, but here is an alternative answer.
If you only care to be able to look at the physical files from inside visual studio and do not necessarily require to see them in the solution explorer default view, then click on the switch view button and choose the folder view and any physical directory/directories that are under your solution root folder will appear here even if they do not appear in the solution explorer default view.

If however, you want to add a folder tree that isn't too large as a virtual solution directory/directories to match your existing tree structure, do that and and then &quot;add the existing&quot; physical files to the virtual directory/directories.  If the physical directory exists in your solution directory it will not copy the files - it will link directly to the physical files but they will appear as part of the solution virtual directories.
    
    
Answer 18: 

    
    
It's annoying that Visual Studio doesn't support this natively, but CMake could generate the Visual Studio project as a work around.

Other than that, just use Qt Creator. It can then export a Visual Studio project.
    
    
Title: IntelliJ show JavaDocs tooltip on mouse over
Description: 
    
    
                    
In Eclipse, when hovering over a method, variable, etc. a tooltip is displayed with the corresponding JavaDocs. Is there such a feature in IntelliJ?
    

        
Answer 1: 

    
    
For IntelliJ 13, there is a checkbox in Editor's page in IDE Settings



EDIT: For IntelliJ 14, the option has been moved to Editor 
Answer 2: 

    
    
Up until IntelliJ version 11, no, not just by hovering over it. If the cursor is inside the method- or attribute name, then CTRL+Q will show the JavaDoc on *nix and Windows. On MacOSX, this is CTRL+J.

Quote: "No, the only way to see the full javadoc is to use Quick Doc (Ctrl-Q)." -- http://devnet.jetbrains.net/thread/121174

EDIT

Since IntelliJ 12.1, this is possible. See @ADNow's answer.
    
    
Answer 3: 

    
    
It is possible in 12.1.

Find idea.properties in the BIN folder inside of wherever your IDE is installed, e.g. C:\Program Files (x86)\JetBrains\IntelliJ\bin

Add a new line to the end of that file:

auto.show.quick.doc=true


Start IDEA and just hover your mouse over something:


    
    
Answer 4: 

    
    
After doing CTRL+Q, you can 


Pin the tooltip (top right corner)
Check Docked Mode (under gear in top right after pinning)
Size as desired
Click icon for Auto show documentation for selected item 


Then when you move your cursor, the documentation will appear in this box.  It costs you a little screen real estate, but I find it's worth it.

I'd post a screenshot but SO won't let me post images.
    
    
Answer 5: 

    
    
In Intellij13, you can use Editor configuration like below:

    
    
Answer 6: 

    
    
For Intellij 15, use the checkbox in File &gt; Settings &gt; Editor &gt; General option Show quick documentation on mouse move.



You can also get there by typing "quick" or something similar in the search box:


    
    
Answer 7: 

    
    
IntelliJ IDEA 14.0.3 Ultimate: Press Ctrl+Alt+S, then choose Editor\General choose Show quick domentation on mouse move


Tips: Look at the top right conner (gear icon) at JavaDoc pop-up window, You can choose:
- Show Toolbar 
- Pinded Mode 
- Docked Mode 
- Floatting Mode 
- Split Mode 

    
    
Answer 8: 

    
    
Adding on to what ADNow said. On the Macintosh: 


Right click on IntelliJ IDEA 12
Click on the Show Package Contents menu option
Open the bin folder
Open idea.properties
Add the line:

auto.show.quick.doc=true

    
    
Answer 9: 

    
    
The easiest way, at least for me, was:


Ctrl+Shift+A
Type: show document
Show quick documentation on mouse move (set it to ON)

    
    
Answer 10: 

    
    
From IntelliJ Ultimate 2018.1.5, aka IntelliJ IDEA 2018.1.5, till 2019.3 ,  there are actually two options under File -/polli
Answer 11: 

    
    
In IntelliJ IDEA 14, it has moved to: File -
Answer 12: 

    
    
In Intellij 2019, I did:  File 
Answer 13: 

    
    
File--
Answer 14: 

    
    
IDEA has "find action":

Open "Help" menu, type "doc", move cursor to "Quick Documentation" it will be highlighted.

Also "find action" can be called from hot key (you can find it in settings-/p/div
Answer 15: 

    
    
On mac in IntelliJ Ultimate (trial) 14 I have mine under Settings &gt; Editor &gt; General &gt; Code completion. The tooltip short is F1 on my laptop.

It's called "Autopopup documentation in (ms):"


    
    
Answer 16: 

    
    
A note for Android Studio (2.3.3 at least) users, because this page came up for my google search "android studio hover javadoc", and android studio is based on Intellij:

See File-
Answer 17: 

    
    
I tried many ways mentioned here, especially the preference - editor - general - code completion - show documentation popup in.. isn't working in version 2019.2.2

Finally, i am just using F1 while caret is on the type/method and it displays the documentation nicely. This is not ideal but helpful.
    
    
Answer 18: 

    
    
In 2020.1 there is in editor javadocs rendering has been added. Screen shots borrowed from intellij documentation.







    
    
Answer 19: 

    
    
On my IntelliJ U on Mac I need to point with cursor on some method, variable etc. and press [cntrl] or [cmd] key. Then click on the link inside popup window which appeared to see JavaDocs 
    
    
Answer 20: 

    
    
All of the above methods are useful but one basic thing missing you need to have src.zip in your JDK (C:\Program Files\Java\jdk1.8.0_171). I assumed it comes preinstalled but for some reason, it was not present in my installation. Another thing to check is if your project is using the specified (1.8.0_171 in this case) JDK.
    
    
Answer 21: 

    
    
The answer is CTRL + P (NOT CTRL + Q)

Someone else posted this answer on JetBrains forum:
The idea is a different IDE. Try to discover its features and try to make the best of it, rather than trying to emulate whatever you used before.
For the most part, Idea has very high usability (much better than Eclipse IMHO) and is streamlined for supporting code editing as best as possible (rather than relying on wizards too much for example).


Javadoc: Ctrl-Q 
A quick view of the implementation:  Ctrl-Shift-I
Show context:  Alt-Q
Show parameters (in a method call):  Ctrl-P
Show error description.  Ctrl-F1


... plus many more shortcuts to navigate in code and different idea views.

I think it rather nice that you can see just the specific bit of information you are interested in with a simple keystroke.
Have a look at the menus which will also show the possibly modified shortcuts for your keymap.

0
Avatar
Jens Voß
Created June 12, 2008, 09:26
And, elsandros, in addition to what Stephen writes: Since you seem to be interested in IDEA's keyboard shortcuts, I highly recommend the "Key Promoter" plugin which helps you memorize the relevant shortcuts quickly.

Also very useful is the "Goto Action" feature, invoked by Ctrl-Shift-A. In the popup, you can enter a keyword (e.g. "Javadoc"), and the IDE tells you the available actions matching your search, along with keyboard shortcuts and the containing action groups (which often also give you a clue about how to navigate to the action using the menu).
    
    
Title: Eclipse/Java code completion not working
Description: 
    
    
                    
I've downloaded, unzipped and setup Eclipse 3.4.2 with some plugins (noteable, EPIC, Clearcase, QuantumDB, MisterQ). 

Now I find when I'm editing Java projects the code completion is not working.  If I type String. and press ctrl+space a popup shows "No Default Proposals" and the status bar at the bottom shows "No completions available".

Any ideas?
    

        
Answer 1: 

    
    
Try restoring the default options in 'Windows &gt; Preferences &gt; Java &gt; Editor &gt; Content Assist &gt; Advanced'

An example of the kind of data you see in this preference screen, however not necessarily what you currently have.



(From Vadim in this blog post " Content Assist Duplicates in Eclipse (Mylyn)":
if have duplicate Mylyn entries, uncheck the duplicate entries that do not contain "(Mylyn)" in their name)

The Eclipse help page defines the default list to restore:


  Select the proposal kinds contained in the 'default' content assist list:
  
  
  Other Java Proposals, 
  SWT Template Proposals, 
  Template Proposals, 
  Type Proposals
  

    
    
Answer 2: 

    
    
I'm adding an answer here in case someone else finds this on Google. Same symptoms; different problem. For me, the type caches had become corrupt.

From http://mschrag.blogspot.co.nz/2009/01/open-type-cant-find-your-class.html


Quit Eclipse
Go to workspace/.metadata/.plugins/org.eclipse.jdt.core
Remove *.index and savedIndexNames.txt
Restart Eclipse and search Ctrl+T for the offending type. The indexes will be rebuilt.

    
    
Answer 3: 

    
    
In case someone comes here and want to activate the autocomplete function, go to

Preferences -&gt; Java -&gt; Editor -&gt; Content Assist. 

Then in the Auto Activation section fill in Auto activation triggers for Java: 

abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ._



    
    
Answer 4: 

    
    
For those running Xfce + having IBus plugin activated, there might be keyboard shortcut conflict.

See more info on my blog: http://peter-butkovic.blogspot.de/2013/05/keyboard-shortcut-ctrlspace-caught-in.html 

UPDATE:

as suggested by @nhahtdh's comment, adding the some more info to answer directly: IBus plugin in Xfce uses by default Ctrl+Space shortcut for keyboard layout switching. To change it, go to: Options and change it to whatever else you prefer.
    
    
Answer 5: 

    
    
Check the lib of your project. It may be that you have include two such jar files in which same class is available or say one class in code can be refrenced in two jar files. In such case also eclipse stops assisting code as it is totally confused.

Better way to check this is go to the file where assist is not working and comment all imports there, than add imports one by one and check at each import if code-assist is working or not.You can easily find the class with duplicate refrences.
    
    
Answer 6: 

    
    
None of these worked for me.

I was experiencing this issue in only once particular class.  What finally worked for me was to delete the offending class and recreate it.  Problem solved... mystery not so much!
    
    
Answer 7: 

    
    
If you have installed Google Toolbar for IE, may be you can face the same problem. Because, the toolbar capture the shortcut ctrl+Space.
    
    
Answer 8: 

    
    
I had this problem and like @Marc, only on a particular class.  I discovered that I needed to designate Open With = Java Editor.  As a Eclipse newbie I hadn't even realized that I was just using a plain text editor.

In the package explorer, right-click the file and chose "Open With". 
    
    
Answer 9: 

    
    
I faced this problem, and spent hours trying to figure out the issue. tried to follow the steps mentioned in the different answers above, the solution I found is on the same lines as Mona suggested, but slightly different. Tried to add as a comment to Mona's answer but no option was available.
Issue with my eclipse was, classpath somehow got corrupted and all the jars and dependent projects were missing. after taking the latest .classpath from repository it worked fine.
    
    
Answer 10: 

    
    
Another solution which worked for me is to go to Java--
Answer 11: 

    
    
I also face this issue but it is resolved in different way.
Steps that I follow may be helpful for others.


Right click on project (the one you are working on)
Go to Properties 
Answer 12: 

    
    
Once you have you configuration checked and completion is still not working:


make sure you have the right directory structure.


Do you see the right icon beside the file?:



It will tell you how the file will be treated by Eclipse:



I am posting this answer as I had that story with with Maven webapp artifact. By default Maven-WebApp does not create folder for sources and I put my Java into resources, wondering for 5 minutes what was going on... :)
    
    
Answer 13: 

    
    
Check that you did not filter out many options inside the Window 
Answer 14: 

    
    
Maybe this helps other people who come across the same issue.

My setup: old Gradle project (version Gradle 2.12) made by someone else, imported using the Gradle Import Wizard into STS (Eclipse Oxygen.2 (4.7.2)).

Code completion did not work either (and I still have hollow Js at the Java files), but at least I got the code completion to work by doing:


right click on the project folder 
Answer 15: 

    
    
In my case, Intellisense had only disappeared in a few classes in one project. It turned out this was because of a missing library on the build path (although it worked previously).

So definitely check all the errors or problems in Eclipse and try to find if a library may be missing
    
    
Answer 16: 

    
    
I ran into this and it ended up being I was opening the file with the text editor and not the java editor.

I wanted to comment on https://stackoverflow.com/users/607470/elroy-flynn
response but the add comment only works after I have a rating of 50? not sure WTF that is...

Thanks,
Tom
    
    
Answer 17: 

    
    
For me the issue was a conflict between several versions of the same library. The Eclipse assist was using an older version than maven. 

I had to go to the .m2 directory and delete the unwanted lib version + restart eclipse.
    
    
Answer 18: 

    
    
I experience problems on Eclipse Neon when editing a file which does not belong to the project directory. When I copy the same file to the project root directory, not even to the src directory, the completion starts working.

When the file is opened from a different directory, only completion for JRE works. That is for example: java. completes, but junit. does not.
    
    
Answer 19: 

    
    
Just in case anyone got to a desperate point where nothing works... It happened to us that the content assist somehow shrunk so no suggestion was shown, just the "Press Ctrl+Space for non-Java..." could be seen.
So, it was just a matter of dragging the corner of the content assist to enlarge the pop-up.

I know, embarrassing. Hope it helps.

Note: this was an Ubuntu server with Xfce4 using Eclipse Oxygen.
    
    
Answer 20: 

    
    
For those who use the latest 3-19 eclipse build:

It just happened to me when upgrading from Oxygen to 3-19 eclipse version, so I assume the auto-complete feature does not migrated correctly during the upgrade process.

The only solution that worked for me was to create a new eclipse workspace, and import the project/s to it. It might take a few minutes, but it worth it - comparing to the time spent on other solutions... 
    
    
Answer 21: 

    
    
If you're experiencing this in an enum, or when initializing an array with anonymous classes, it's a known bug in Eclipse. See Eclipse content assist not working in enum constant parameter list.
    
    
Answer 22: 

    
    
I have run into this problem since upgrading to Eclipse 2019-09.  Based on some of the suggestions above, this is what worked for me.

I had to go to Eclipse -
Answer 23: 

    
    
Running STS on Java Spring Boot projects, here's what works for me :


    
    
Title: Eclipse: Set maximum line length for auto formatting?
Description: 
    
    
                    
I am working with Java. If I hit Ctrl+Shift+F in Eclipse Helios, it will auto format my code. At a certain point, it wraps lines. I would like to increase the maximum line length. How can I do this?
    

        
Answer 1: 

    
    
In preferences Java -
Answer 2: 

    
    
Take a look of following image:

Java-&gt;Code style-&gt;Formatter-&gt; Edit



    
    
Answer 3: 

    
    
Comments have their own line length setting at the bottom of the setting page java-
Answer 4: 

    
    
for XML line width, update preferences 
Answer 5: 

    
    
For HTML / PHP / JSP / JSPF: Web -&gt; HTML Files -&gt; Editor -&gt; Line width
    
    
Answer 6: 

    
    
Click Project-/strongstrong
Answer 7: 

    
    
For XHTML files: Web -&gt; HTML Files -&gt; Editor -&gt; Line width
    
    
Answer 8: 

    
    
Preferences -
Answer 9: 

    
    
I use the Eclipse version called Mars which works with Java 7.  

Go to Preferences -
Answer 10: 

    
    
Line length formatter setup is blocked for annotations (Eclipse Photon checked). Therefore it is needed in Line Wrapping -
Title: Is there a way to collapse all code blocks in Eclipse?
Description: 
    
    
                    
Eclipse has that "+/-" on the left to expand and collapse blocks of code.

I've got tens of thousands of lines to go through and would really like to just collapse everything, and selectively expand blocks to look at them.
    

        
Answer 1: 

    
    
There is a hotkey, mapped by default to Ctrl+Shift+NUM_KEYPAD_DIVIDE.

You can change it to something else via Window -/ppkbd/kbdkbd/kbdkbd/kbd/ppem/emkbd/kbdkbd/kbd/ppkbd/kbdkbd/kbd/p/div
Answer 2: 

    
    
In addition to the hotkey, if you right click in the gutter where you see the +/-, there is a context menu item 'Folding.'  Opening the submenu associated with this, you can see a 'Collapse All' item.  this will also do what you wish.
    
    
Answer 3: 

    
    
A "Collapse All" command exists in recent builds (e.g. 3.2 M6) and is bound to Ctrl+Shift+NUM_KEYPAD_DIVIDE by default.

You can also configure it in Preferences-
Answer 4: 

    
    
The question is a bit old, but let me add a different approach.  In addition to the above hot-key approaches, there are default preference settings that can be toggled.

As of Eclipse Galileo (and definitely in my Eclipse Version: Indigo Service Release 2 Build id: 20120216-1857) language specific preferences can open up new files to edit which are already collapsed or expanded.

Here is a link to Eclipse Galileo online docs showing the feature for C/C++:  http://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.cdt.doc.user/reference/cdt_u_c_editor_folding.htm .

In my Eclipse Indigo I can open the Folding Preferences window via : menu/ Window/ Preferences/ Java/ Editor/ Folding and set all options on so I can open files by default that are completely collapsed.
    
    
Answer 5: 

    
    
If you always want the code collapsed by default, go to Windows /ppa href="https://i.stack.imgur.com/4fOfo.png" rel="noreferrer"img src="https://i.stack.imgur.com/4fOfo.png" alt="enter image description here"/a/p/div
Answer 6: 

    
    
Ctrl+Shift+/ and Ctrl+Shift+* works great for Aptana Studio 3.

Apart from that you can always use Window 
Answer 7: 

    
    
Right click on the +/- sign and click collapse all or expand all.
    
    
Answer 8: 

    
    
If you are using PyDev in Eclipse, its Ctrl0 and Ctrl9 for collapse all and uncollapse all respectively. Ctrl- and Ctrl= to collapse individual methods when your cursor is on the line of the method declaration.
    
    
Answer 9: 

    
    
Just to sum up:


anycode:

ctrl + shift + NUMPAD_divide = collapse all 
NUMPAD_multiply = exand all

pydev:

-ctrl + 0 = collapse all
-ctrl + 9 = exand all


    
    
Answer 10: 

    
    
Right click on the circles +/- sign and under Foldings select Collapse All
    
    
Answer 11: 

    
    
I had the same problem and found out Folding can be enabled or disabled, and in my case got disabled somehow.

To solve it, simply right click on the line numbers/breakpoint section (vertical bar in the left of the editor), then under the 'Folding' section chose 'Enable folding'. 

ctrlshift/ should be working fine after.
    
    
Answer 12: 

    
    
Shortcuts that worked for me in Versions Oxygen.2 Release (PHP/WINDOWS 7) were


Collapse all code blocks: CTRL + SHIFT + NUMPAD_DIVIDE
Expand all code blocks : CTRL + NUMPAD_MULTIPLY

    
    
Answer 13: 

    
    
In case you don't have a separate numpad, you can activate the overlapping numpad using the number lock- this varies with the type of keypad-strong/strongstrong/strong/ppkbd/kbdkbd/kbdkbd/kbd/pp/p/div
Answer 14: 

    
    
Collapse all  : CTRL + SHIFT + /

Expand all code blocks : CTRL + * 
    
    
Answer 15: 

    
    
I noticed few things:
Ctrl+/ toggles Folding-enabled or -disabled.
It is Ctrl+* that expands. Ctrl+Shift+* collapses just like Ctrl+Shift+/
    
    
Title: How do I completely rename an Xcode project (i.e. inclusive of folders)?
Description: 
    
    
                    
I have a project named XXX. I want to rename this project to YYY.

Note that XXX is an extremely common term (for e.g. "data", or simply "project"), and thus a simple RegEx search-and-replace is not possible, out of risk of corrupting the project configuration files.

My current project directory contains the following items:


XXX
XXXTests
XXX.xcodeproj


and I want to rename them to:


YYY
YYYTests
YYY.xcodeproj


... respectively, with the necessary changes being reflected in my project file. 

How can I accomplish this without having to manually create and populate a new project?



Edit: It is absolutely ridiculous that this has become my most upvoted question.
    

        
Answer 1: 

    
    
Step 1 - Rename the project

Click on the project you want to rename in the &quot;Project navigator&quot; in the left panel of the Xcode window.
In the right panel, select the &quot;File inspector&quot;, and the name of your project should be found under &quot;Identity and Type&quot;. Change it to your new name.
When the dialog asks whether to rename or not rename the
project's content items, click &quot;Rename&quot;. Say yes to any warning about uncommitted changes.

Step 2 - Rename the scheme

At the top of the window, next to the &quot;Stop&quot; button, there is a scheme for your product under its old name; click on it, then choose &quot;Manage Schemes…&quot;.
Click on the old name in the scheme and it will become editable; change the name and click &quot;Close&quot;.

Step 3 - Rename the folder with your assets

Quit Xcode. Rename the master folder that contains all your project files.
In the correctly-named master folder, beside your newly-named .xcodeproj file, there is probably a wrongly-named OLD folder containing your source files. Rename the OLD folder to your new name (if you use Git, you could run git mv oldname newname so that Git recognizes this is a move, rather than deleting/adding new files).
Re-open the project in Xcode. If you see a warning &quot;The folder OLD does not exist&quot;, dismiss the warning. The source files in the renamed folder will be grayed out because the path has broken.
In the &quot;Project navigator&quot; in the left-hand panel, click on the top-level folder representing the OLD folder you renamed.
In the right-hand panel, under &quot;Identity and Type&quot;, change the &quot;Name&quot; field from the OLD name to the new name.
Just below that field is a &quot;Location&quot; menu. If the full path has not corrected itself, click on the nearby folder icon and choose the renamed folder.

Step 4 - Rename the Build plist data

Click on the project in the &quot;Project navigator&quot; on the left, and in the main panel select &quot;Build Settings&quot;.
Search for &quot;plist&quot; in the settings.
In the Packaging section, you will see Info.plist and Product Bundle Identifier.
If there is a name entered in Info.plist, update it.
Do the same for Product Bundle Identifier, unless it is utilizing the ${PRODUCT_NAME} variable. In that case, search for &quot;product&quot; in the settings and update Product Name. If Product Name is based on ${TARGET_NAME}, click on the actual target item in the TARGETS list on the left of the settings pane and edit it, and all related settings will update immediately.
Search the settings for &quot;prefix&quot; and ensure that Prefix Header's path is also updated to the new name.
If you use SwiftUI, search for &quot;Development Assets&quot; and update the path.

Step 5 - Repeat step 3 for tests (if you have them)
Step 6 - Repeat step 3 for core data if its name matches project name (if you have it)
Step 7 - Clean and rebuild your project

Command + Shift + K to clean
Command + B to build

    
    
Answer 2: 

    
    
To add to @luke-west 's excellent answer:

When using CocoaPods

After step 2:


Quit XCode.
In the master folder, rename OLD.xcworkspace to NEW.xcworkspace.


After step 4:


In XCode: choose and edit Podfile from the project navigator. You should see a target clause with the OLD name. Change it to NEW.
Quit XCode.
In the project folder, delete the OLD.podspec file.
rm -rf Pods/
Run pod install.
Open XCode.
Click on your project name in the project navigator.
In the main pane, switch to the Build Phases tab.
Under Link Binary With Libraries, look for libPods-OLD.a and delete
it.
If you have an objective-c Bridging header go to Build settings and change the location of the header from OLD/OLD-Bridging-Header.h to NEW/NEW-Bridging-Header.h
Clean and run.

    
    
Answer 3: 

    
    
A quicker solution using shell commands (works with CocoaPods too):

PLEASE cd TO A NON-GIT REPOSITORY BEFORE PROCEEDING ⚠️

Step 1 - Prerequisites


Copy your original project folder to a temporary /NewProjectFolder OUTSIDE your git repository. ⚠️  changes to .git could corrupt your git index 💥 ☠


Step 2 - Open Terminal

Now we're going to rename the project from oldName to NewProject.


Close XCode.
Go to your /NewProjectFolder.


cd /Path/to/your/NewProjectFolder



Install the extra tools needed.


brew install rename ack



Rename the files and directories containing the source string. You’ll need to RUN THIS COMMAND TWICE, because directories will be renamed first, then files and directories inside those will be renamed on the next iteration.


find . -name 'oldName*' -print0 | xargs -0 rename --subst-all 'oldName' 'NewProject'



Check if all the files containing the source string are renamed. You should see empty output.


find . -name 'oldName*'



Replace all occurrences of the string in all files.


ack --literal --files-with-matches 'oldName' --print0 | xargs -0 sed -i '' 's/oldName/NewProject/g'



Check if all occurrences of the string in all files were replaced. You should see empty output.


ack --literal 'oldName'



Run pod install
Add NewProjectFolder to your repository.
You are done!

    
    
Answer 4: 

    
    
XCode 11.0+. 

It's really simple now. Just go to Project Navigator left panel of the XCode window.
Press Enter to make it active for rename, just like you change the folder name.
   

Just change the new name here, and XCode will ask you for renaming other pieces of stuff.  

. 

Tap on Rename here and you are done.
If you are confused about your root folder name that why it's not changed, well it's just a folder. just renamed it with a new name.

    
    
Answer 5: 

    
    
There is a GitHub project called Xcode Project Renamer:


  It should be executed from inside root of Xcode project directory and called with two string parameters: $OLD_PROJECT_NAME &amp; $NEW_PROJECT_NAME
  
  Script goes through all the files and directories recursively,
  including Xcode project or workspace file and replaces all occurrences
  of $OLD_PROJECT_NAME string with $NEW_PROJECT_NAME string (both in
  each file's name and content).


DON'T FORGET TO BACKUP YOUR PROJECT!

Xcode Project Renamer
    
    
Answer 6: 

    
    
Extra instructions when following @Luke-West's + @Vaiden's solutions:


If your scheme has not changed (still showing my mac) on the top left next to the stop button:


Click NEWLY created Project name (next to stop button) 
Answer 7: 

    
    
To change the project name;


Select your project in the Project navigator.


2.In the Identity and Type section of the File inspector, enter a new name into the Name field.

3.Press Return.

A dialog is displayed, listing the items in your project that can be renamed. The dialog includes a preview of how the items will appear after the change.


To selectively rename items, disable the checkboxes for any items you don’t want to rename. To rename only your app, leave the app selected and deselect all other items.
Press "Rename"

    
    
Answer 8: 

    
    
Aside from all the steps Luke and Vaiden recommended, I also had to rename all the customModule properties in my Storyboard to match the new name, and this has to be case sensitive.
    
    
Answer 9: 

    
    
Adding to the accepted answer by Luke West. If you have any entitlements:

Close Xcode
Change the entitlements filename
Go into Xcode, select the entitlements file should be highlighted red, in the File inspector select the Folder icon and select your renamed file.
Go into Build Settings, and search &quot;entitlements&quot; and update the folder name and file name for the entitlement.
Clean and rebuild

    
    
Title: How to see JavaDoc in IntelliJ IDEA? [duplicate]
Description: 
    
    
                        
            
        
            
                
                    
                        This question already has answers here:
                        
                    
                
            
                    
                        IntelliJ show JavaDocs tooltip on mouse over
                            
                                (21 answers)
                            
                    
                Closed 2 years ago.
        


    

I just switched from Eclipse to IntelliJ.   IntelliJ lacks one feature from Eclipse - when you put your mouse over a method, Eclipse shows javadoc info. I think the way to show it is to use a shortcut - command+J, but when I click it, I get something wrong as on the screen shot below. Please advise me on how I can quickly get javadoc information. I need to at least know what type a method returns.


    

        
Answer 1: 

    
    
Use View | Quick Documentation or the corresponding keyboard shortcut (by default: Ctrl+Q on Windows/Linux and Ctrl+J on macOS or F1 in the recent IDE versions). See the documentation for more information.

It's also possible to enable automatic JavaDoc popup on explicit (invoked by a shortcut) code completion in Settings | Editor | General | Code completion (Autopopup documentation):



Yet another way to see the quick doc is on mouse move:


    
    
Answer 2: 

    
    
Go to File/Settings, Editor, click on General. 

Scroll down, then ✔ Show quick documentation on mouse move.


    
    
Answer 3: 

    
    
Alternatively you can position your cursor on the item and show JavaDoc using 


  CTRL+Q


which is the default shortcut.

Edit: As Methical mentioned on Mac the shortcut is


  CTRL+j (^+j not ⌘+j) 

    
    
Answer 4: 

    
    
There is nice feature which shows quick documentation when your mouse is over element.

IntelliJ 14

Editor / General -/ppstrong/strong/pp/pprecode/code/pre/div
Answer 5: 

    
    
Configuration for IntelliJ IDEA CE 2016.3.4 to enable JavaDocs on mouse hover. I am running IntelliJ IDEA on Mac OS but believe that Linux/Windows should have similar options.
Autopopup docs:
IntelliJ IDEA &gt; Preferences &gt; Editor &gt; General &gt; Code Completion

Documentation on mouse move:
IntelliJ IDEA &gt; Preferences &gt; Editor &gt; General

NOTE: Please hit Apply button to apply these settings
    
    
Answer 6: 

    
    
To best mirror Eclipses functionality, enable the following settings:


IDE Settings/Editor -strong/strong/lilistrong/strong
Answer 7: 

    
    
Go to Settings -
Answer 8: 

    
    
IntelliJ IDEA 15 added this feature

Now it is available as EAP.

As you can see in the picture below, the caret position doesn't influence the cursor position:


This feature was implemented in IntelliJ IDEA 15 142.4675.3 Release Notes.
    
    
Answer 9: 

    
    
For me, it wasn't just getting the javadoc window to open, but also getting the complete javadoc to present.  You may still get a sparse javadoc that is based solely on the method signature if you are importing libraries from a Maven repository and do not tell Idea to include the javadocs in the download.  Be sure to tick the "JavaDocs" option in the "Download Library From Maven Repository" dialog, which can be found under Project Structure -
Answer 10: 

    
    
The closest to Eclipse will be Ctrl+Button2 Click (Scroll click)

It's called Quick Doc in IntelliJ, I wish guys from JetBrains one day add quick doc like Eclipse with Ctrl+Mouse Move it's so much better.

In my case only with only mouse move is a bit annoying, so if you search in Preferences/Settings --/strong/pulliem/emem/em/liliem/emem/em/li/ul/div
Answer 11: 

    
    
I have noticed that selecting the method name and pressing F2(Quick Documentation) dispalys it's JavaDoc. 
I am using Intellij 2016, and Eclipse Keymap
    
    
Title: PHPDoc type hinting for array of objects?
Description: 
    
    
                    
So, in PHPDoc one can specify @var above the member variable declaration to hint at its type. Then an IDE, for ex. PHPEd, will know what type of object it's working with and will be able to provide a code insight for that variable.

&lt;?php
  class Test
  {
    /** @var SomeObj */
    private $someObjInstance;
  }
?&gt;


This works great until I need to do the same to an array of objects to be able to get a proper hint when I iterate through those objects later on.

So, is there a way to declare a PHPDoc tag to specify that the member variable is an array of SomeObjs? @var array is not enough, and @var array(SomeObj) doesn't seem to be valid, for example.
    

        
Answer 1: 

    
    
Use:

/* @var $objs Test[] */
foreach ($objs as $obj) {
    // Typehinting will occur after typing $obj-&gt;
}


when typehinting inline variables, and

class A {
    /** @var Test[] */
    private $items;
}


for class properties.

Previous answer from '09 when PHPDoc (and IDEs like Zend Studio and Netbeans) didn't have that option:

The best you can do is say,

foreach ($Objs as $Obj)
{
    /* @var $Obj Test */
    // You should be able to get hinting after the preceding line if you type $Obj-&gt;
}


I do that a lot in Zend Studio. Don't know about other editors, but it ought to work.
    
    
Answer 2: 

    
    
In the PhpStorm IDE from JetBrains, you can use /** @var SomeObj[] */, e.g.:
/**
 * @return SomeObj[]
 */
function getSomeObjects() {...}

The phpdoc documentation recommends this method:

specified containing a single type, the Type definition informs the reader of the type of each array element. Only one Type is then expected as element for a given array.
Example: @return int[]

    
    
Answer 3: 

    
    
Netbeans hints:

You get code completion on $users[0]-&gt; and for $this-&gt; for an array of User classes. 

/**
 * @var User[]
 */
var $users = array();


You also can see the type of the array in a list of class members when you do completion of $this-&gt;...
    
    
Answer 4: 

    
    
To specify a variable is an array of objects: 

$needles = getAllNeedles();
/* @var $needles Needle[] */
$needles[1]-&gt;...                        //codehinting works


This works in Netbeans 7.2 (I'm using it)

Works also with:

$needles = getAllNeedles();
/* @var $needles Needle[] */
foreach ($needles as $needle) {
    $needle-&gt;...                        //codehinting works
}


Therefore use of declaration inside the foreach is not necessary.
    
    
Answer 5: 

    
    
PSR-5: PHPDoc proposes a form of Generics-style notation.

Syntax

Type[]
Type&lt;Type&gt;
Type&lt;Type[, Type]...&gt;
Type&lt;Type[|Type]...&gt;


Values in a Collection MAY even be another array and even another Collection.

Type&lt;Type&lt;Type&gt;&gt;
Type&lt;Type&lt;Type[, Type]...&gt;&gt;
Type&lt;Type&lt;Type[|Type]...&gt;&gt;


Examples

&lt;?php

$x = [new Name()];
/* @var $x Name[] */

$y = new Collection([new Name()]);
/* @var $y Collection&lt;Name&gt; */

$a = new Collection(); 
$a[] = new Model_User(); 
$a-&gt;resetChanges(); 
$a[0]-&gt;name = "George"; 
$a-&gt;echoChanges();
/* @var $a Collection&lt;Model_User&gt; */


Note: If you are expecting an IDE to do code assist then it's another question about if the IDE supports PHPDoc Generic-style collections notation.

From my answer to this question.
    
    
Answer 6: 

    
    
I prefer to read and write clean code - as outlined in "Clean Code" by Robert C. Martin.
When following his credo you should not require the developer (as user of your API) to know the (internal) structure of your array. 

The API user may ask: Is that an array with one dimension only? Are the objects spread around on all levels of a multi dimensional array? How many nested loops (foreach, etc.) do i need to access all objects? What type of objects are "stored" in that array?

As you outlined you want to use that array (which contains objects) as a one dimensional array. 

As outlined by Nishi you can use:

/**
 * @return SomeObj[]
 */


for that. 

But again: be aware - this is not a standard docblock notation. This notation was introduced by some IDE producers. 

Okay, okay, as a developer you know that "[]" is tied to an array in PHP. But what do a "something[]" mean in normal PHP context? "[]" means: create new element within "something". The new element could be everything. But what you want to express is: array of objects with the same type and it´s exact type. As you can see, the IDE producer introduces a new context. A new context you had to learn. A new context other PHP developers had to learn (to understand your docblocks). Bad style (!).

Because your array do have one dimension you maybe want to call that "array of objects" a "list". Be aware that "list" has a very special meaning in other programming languages. It would be mutch better to call it "collection" for example.

Remember: you use a programming language that enables you all options of OOP.
Use a class instead of an array and make your class traversable like an array. E.g.:

class orderCollection implements ArrayIterator


Or if you want to store the internal objects on different levels within an multi dimensional array/object structure:

class orderCollection implements RecursiveArrayIterator


This solution replaces your array by an object of type "orderCollection", but do not enable code completion within your IDE so far. Okay. Next step:

Implement the methods that are introduced by the interface with docblocks - particular: 

/**
 * [...]
 * @return Order
 */
orderCollection::current()

/**
 * [...]
 * @return integer E.g. database identifier of the order
 */
orderCollection::key()

/**
 * [...]
 * @return Order
 */
orderCollection::offsetGet()


Do not forget to use type hinting for:

orderCollection::append(Order $order)
orderCollection::offsetSet(Order $order)


This solution stops introducing a lot of:

/** @var $key ... */
/** @var $value ... */


all over your code files (e.g. within loops), as Zahymaka confirmed with her/his answer. Your API user is not forced to introduce that docblocks, to have code completion. To have @return on only one place reduces the redundancy (@var) as mutch as possible. Sprinkle "docBlocks with @var" would make your code worst readable.

Finaly you are done. Looks hard to achive? Looks like taking a sledgehammer to crack a nut? Not realy, since you are familiar with that interfaces and with clean code. Remember: your source code is written once / read many.

If code completion of your IDE do not work with this approach, switch to a better one (e.g. IntelliJ IDEA, PhpStorm, Netbeans) or file a feature request on the issue tracker of your IDE producer.

Thanks to Christian Weiss (from Germany) for being my trainer and for teaching me such a great stuff. PS: Meet me and him on XING.
    
    
Answer 7: 

    
    
Use array[type] in Zend Studio.

In Zend Studio, array[MyClass] or array[int] or even array[array[MyClass]] work great.
    
    
Answer 8: 

    
    
In NetBeans 7.0 (may be lower too) you could declare  the the return type "array with Text objects " just as @return Text and the code hinting will work:

Edit: updated the example with @Bob Fanger suggestion

/**
 * get all Tests
 *
 * @return Test|Array $tests
 */
public function getAllTexts(){
    return array(new Test(), new Test());
}


and just use it:

$tests =  $controller-&gt;getAllTests();
//$tests-&gt;         //codehinting works!
//$tests[0]-&gt;      //codehinting works!

foreach($tests as $text){
    //$test-&gt;      //codehinting works!
}


It is not perfect but it is better then just to leave it just "mixed", which brings no value.

CONS is you are allowed to tread the array as Text Object which will throw errors.
    
    
Answer 9: 

    
    
As DanielaWaranie mentioned in her answer - there is a way to specify the type of $item when you iterating over $items in $collectionObject: Add @return MyEntitiesClassName to current() and rest of the Iterator and ArrayAccess-methods which return values.

Boom! No need in /** @var SomeObj[] $collectionObj */ over foreach, and works right with collection object, no need to return collection with specific method described as @return SomeObj[].

I suspect not all IDE support it but it works perfectly fine in PhpStorm, which makes me happier.

Example:

class MyCollection implements Countable, Iterator, ArrayAccess {

    /**
     * @return User
     */
    public function current() {
        return $this-&gt;items[$this-&gt;cursor];
    }

    //... implement rest of the required `interface` methods and your custom
}


What useful i was going to add posting this answer

In my case current() and rest of interface-methods are implemented in Abstract-collection class and I do not know what kind of entities will eventually be stored in collection.

So here is the trick: Do not specify return type in abstract class, instead use PhpDoc instuction @method in description of specific collection class.

Example:

class User {

    function printLogin() {
        echo $this-&gt;login;
    }

}

abstract class MyCollection implements Countable, Iterator, ArrayAccess {

    protected $items = [];

    public function current() {
        return $this-&gt;items[$this-&gt;cursor];
    }

    //... implement rest of the required `interface` methods and your custom
    //... abstract methods which will be shared among child-classes
}

/**
 * @method User current()
 * ...rest of methods (for ArrayAccess) if needed
 */
class UserCollection extends MyCollection {

    function add(User $user) {
        $this-&gt;items[] = $user;
    }

    // User collection specific methods...

}


Now, usage of classes:

$collection = new UserCollection();
$collection-&gt;add(new User(1));
$collection-&gt;add(new User(2));
$collection-&gt;add(new User(3));

foreach ($collection as $user) {
    // IDE should `recognize` method `printLogin()` here!
    $user-&gt;printLogin();
}


Once again: I suspect not all IDE support it, but PhpStorm does. Try yours, post in comment the results!
    
    
Answer 10: 

    
    
I know I'm late to the party, but I've been working on this problem recently.  I hope someone sees this because the accepted answer, although correct, is not the best way you can do this.  Not in PHPStorm at least, I haven't tested NetBeans though.

The best way involves extending the ArrayIterator class rather than using native array types.  This allows you to type hint at a class-level rather than at an instance-level, meaning you only have to PHPDoc once, not throughout your code (which is not only messy and violates DRY, but can also be problematic when it comes to refactoring - PHPStorm has a habit of missing PHPDoc when refactoring)

See code below:

class MyObj
{
    private $val;
    public function __construct($val) { $this-&gt;val = $val; }
    public function getter() { return $this-&gt;val; }
}

/**
 * @method MyObj current()
 */
class MyObjCollection extends ArrayIterator
{
    public function __construct(Array $array = [])
    {
        foreach($array as $object)
        {
            if(!is_a($object, MyObj::class))
            {
                throw new Exception('Invalid object passed to ' . __METHOD__ . ', expected type ' . MyObj::class);
            }
        }
        parent::__construct($array);
    }

    public function echoContents()
    {
        foreach($this as $key =&gt; $myObj)
        {
            echo $key . ': ' . $myObj-&gt;getter() . '&lt;br&gt;';
        }
    }
}

$myObjCollection = new MyObjCollection([
    new MyObj(1),
    new MyObj('foo'),
    new MyObj('blah'),
    new MyObj(23),
    new MyObj(array())
]);

$myObjCollection-&gt;echoContents();


The key here is the PHPDoc @method MyObj current() overriding the return type  inherited from ArrayIterator (which is mixed).  The inclusion of this PHPDoc means that when we iterate over the class properties using foreach($this as $myObj), we then get code completion when referring to the variable $myObj-&gt;...

To me, this is the neatest way to achieve this (at least until PHP introduces Typed Arrays, if they ever do), as we're declaring the iterator type in the iterable class, not on instances of the class scattered throughout the code.

I haven't shown here the complete solution for extending ArrayIterator, so if you use this technique, you may also want to:


Include other class-level PHPDoc as required, for methods such as offsetGet($index) and next()
Move the sanity check is_a($object, MyObj::class) from the constructor into a private method
Call this (now private) sanity check from method overrides such as offsetSet($index, $newval) and append($value)

    
    
Answer 11: 

    
    
The problem is that @var can just denote a single type - Not contain a complex formula. If you had a syntax for "array of Foo", why stop there and not add a syntax for "array of array, that contains 2 Foo's and three Bar's"? I understand that a list of elements is perhaps more generic than that, but it's a slippery slope.

Personally, I have some times used @var Foo[] to signify "an array of Foo's", but it's not supported by IDE's.
    
    
Answer 12: 

    
    
&lt;?php foreach($this-&gt;models as /** @var Model_Object_WheelModel */ $model): ?&gt;
    &lt;?php
    // Type hinting now works:
    $model-&gt;getImage();
    ?&gt;
&lt;?php endforeach; ?&gt;

    
    
Answer 13: 

    
    
I've found something which is working, it can save lives !

private $userList = array();
$userList = User::fetchAll(); // now $userList is an array of User objects
foreach ($userList as $user) {
   $user instanceof User;
   echo $user-&gt;getName();
}

    
    
Title: Unresolved reference issue in PyCharm
Description: 
    
    
                    
I have a directory structure

├── simulate.py
├── src
│   ├── networkAlgorithm.py
│   ├── ...


And I can access the network module with sys.path.insert().    

import sys
import os.path
sys.path.insert(0, "./src")
from networkAlgorithm import *


However, pycharm complains that it cannot access the module. How can I teach pycham to resolve the reference?


    

        
Answer 1: 

    
    
Manually adding it as you have done is indeed one way of doing this, but there is a simpler method, and that is by simply telling pycharm that you want to add the src folder as a source root, and then adding the sources root to your python path.

This way, you don't have to hard code things into your interpreter's settings:


Add src as a source content root:


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;



Then make sure to add add sources to your PYTHONPATH:





Now imports will be resolved:


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;


This way, you can add whatever you want as a source root, and things will simply work. If you unmarked it as a source root however, you will get an error:

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;


After all this don't forget to restart. In PyCharm menu select: File --/p/div
Answer 2: 

    
    

check for __init__.py file in src folder 
add the src folder as a source root
Then make sure to add add sources to your PYTHONPATH (see above)
in PyCharm menu select: File --/li/ol/div
Answer 3: 

    
    
If anyone is still looking at this, the accepted answer still works for PyCharm 2016.3 when I tried it. The UI might have changed, but the options are still the same. 

ie. Right click on your root folder --
Answer 4: 

    
    
After testing all workarounds, i suggest you to take a look at Settings -&gt; Project -&gt; project dependencies and re-arrange them.


    
    
Answer 5: 

    
    
Normally, $PYTHONPATH is used to teach python interpreter to find necessary modules. PyCharm needs to add the path in Preference.


    
    
Answer 6: 

    
    
Generally, this is a missing package problem, just place the caret at the unresolved reference and press Alt+Enter to reveal the options, then you should know how to solve it.
    
    
Answer 7: 

    
    
After following the accepted answer, doing the following solved it for me:

File → Settings → Project &lt;your directory/project&gt; → Project Dependencies

Chose the directory/project where your file that has unresolved imports resides and check the box to tell Pycharm that that project depends on your other project.

My folder hierarcy is slightly different from the one in the question. Mine is like this

├── MyDirectory  
│     └── simulate.py  
├── src  
│     ├── networkAlgorithm.py  
│     ├── ...


Telling Pycharm that src depends on MyDirectory solved the issue for me!
    
    
Answer 8: 

    
    
Although all the answers are really helpful, there's one tiny piece of information that should be explained explicitly:


Essentially, a project with multiple hierarchical directories work as a package with some attributes.
To import custom local created Classes, we need to navigate to the directory containing .py file and create an __init__.py (empty) file there.


Why this helps is because this file is required to make Python treat the directory as containing packages. Cheers!
    
    
Answer 9: 

    
    
Install via PyCharm (works with Community Edition). Open up Settings &gt; Project &gt; Project Interpreter then click the green + icon in the screenshot below. In the 2nd dialogue that opens, enter the package name and click the 'Install Package' button.


    
    
Answer 10: 

    
    
Many a times what happens is that the plugin is not installed. e.g. 

If you are developing a django project and you do not have django plugin installed in pyCharm, it says error 'unresolved reference'. 
Refer:
https://www.jetbrains.com/pycharm/help/resolving-references.html
    
    
Answer 11: 

    
    
Please check if you are using the right interpreter that you are supposed to. I was getting error "unresolved reference 'django' " to solve this I changed Project Interpreter (Changed Python 3 to Python 2.7) from project settings:
Select Project, go to File -
Answer 12: 

    
    
In my case the problem was I was using Virtual environment which didn't have access to global site-packages. Thus, the interpreter was not aware of the newly installed packages.

To resolve the issue, just edit or recreate your virtual interpreter and tick the Inherit global site-packages option.


    
    
Answer 13: 

    
    
This worked for me: Top Menu -&gt; File -&gt; Invalidate Caches/Restart
    
    
Answer 14: 

    
    
Done in PyCharm 2019.3.1
Right-click on your src folder -
Answer 15: 

    
    
I was also using a virtual environment like Dan above, however I was able to add an interpreter in the existing environment, therefore not needing to inherit global site packages and therefore undo what a virtual environment is trying to achieve.
    
    
Answer 16: 

    
    
For me, adding virtualenv (venv)'s site-packages path to the paths of the interpreter works.
Finally!


    
    
Answer 17: 

    
    
I tried everything here twice and even more. I finally solved it doing something I hadn't seen anywhere online.  If you go to Settings&gt;Editor&gt;File Types there is an 'Ignore Files and folders' line at the bottom.  In my case, I was ignoring 'venv', which is what I always name my virtual environments.  So I removed venv; from the list of directories to ignore and VOILA!!  I was FINALLY able to fix this problem.  Literally all of my import problems were fixed for the project.
BTW, I had installed each and every package using PyCharm, and not through a terminal. (Meaning, by going to Settings&gt;Interpreter...). I had invalidated cache, changed 'Source Root', restarted PyCharm, refreshed my interpreters paths, changed interpreters, deleted my venv...  I tried everything.  This finally worked. Obviously there are multiple problems going on here with different people, so this may not work for you, but it's definitely worth a shot if nothing else has worked, and easy to reverse if it doesn't.
    
    
Answer 18: 

    
    

--&gt; Right-click on the directory where your files are located in PyCharm
Go to the --&gt; Mark Directory as
Select the --&gt; Source Root

your problem will be solved
    
    
Answer 19: 

    
    
Pycharm uses venv. In the venv's console you should install the packages explicitly or go in settings -&gt; project interpreter -&gt; add interpreter -&gt; inherit global site-packages.
    
    
Answer 20: 

    
    
The easiest way to fix it is by doing the following in your pyCharm software:

Click on: File 
Answer 21: 

    
    
In newer versions of pycharm u can do simply by right clicking on the directory or python package from which you want to import a file, then click on 'Mark Directory As' -/p/div
Title: How to make phpstorm display line numbers by default?
Description: 
    
    
                    
How to make phpstorm display line numbers by default?
Couldn't find that option. It's kind of annoying to turn them on manually for each page.
    

        
Answer 1: 

    
    
Settings (or Preferences if you are on Mac) | Editor | General | Appearance and check Show line numbers.
    
    
Answer 2: 

    
    
Just now found where is it on Windows. Its View -code/code
Answer 3: 

    
    
All the guys are right. I am just bringing the the current soultion with the images.


Go to File-code/code/li/olpimg src="https://i.stack.imgur.com/nwKvV.jpg" alt="enter image description here"/pol start="2"lipcode/codecode/code
Answer 4: 

    
    
If you're on a Mac: 

PhpStorm -
Answer 5: 

    
    
just double tap 'Shift' 
and search for 'Line Numbers'
and there you will see a toggle option on or off
    
    
Answer 6: 

    
    
In PHPStorm 8 this setting is no longer under 'Appearance' but now in:

File -
Answer 7: 

    
    
Follow the below steps:


Click on File-
Answer 8: 

    
    


Simplest solution for line numbers in php storm..There are many other solutions but i think A big picture a good from 1000 words.
    
    
Answer 9: 

    
    
File -
Answer 10: 

    
    
Settings -/p/div
Answer 11: 

    
    
Just right click on left side where line numbers generally show, select "show line numbers"
    
    
Answer 12: 

    
    
In PHPStorm 2016: File 
Answer 13: 

    
    
By  typing command + shift + A you will get a search prompt and write line numbers . Now you can trigger button on or off


    
    
Answer 14: 

    
    
For PhpStorm version 9 on Windows.
File&#8594;Settings&#8594;Editor&#8594;General&#8594;Appearence then check Show line numbers
    
    
Answer 15: 

    
    
in the top right corner is a search button type show line numbers and you will see a toggle option. this way you never have to do it yourself. :) 


    
    
Answer 16: 

    
    
File-&gt;settings-&gt;IDE Settings-&gt;Editor-&gt;Appearance


And just check  the "Show line  numbers" works with 8.0.1
    
    
Answer 17: 

    
    
On the Mac version 8.0.1 has this setting here:

PhpStorm 
Answer 18: 

    
    
You should go to: File -
Answer 19: 

    
    
As of the latest version:
PhpStorm &gt; Preferences.. &gt; Editor &gt; General &gt; Appearance &gt; Show line numbers

    
    
Title: How to delete a module in Android Studio
Description: 
    
    
                    
Is there a way to delete a module within Android Studio?
When I right click on a module I can't find an option for deletion, is it elsewhere?
    

        
Answer 1: 

    
    
The "Mark as Excluded" option isn't there anymore.

The current (Android Studio 0.8.x - 2.2.x) way to do this is via the Project Structure dialog. It can be accessed via "File -/ppimg src="https://i.stack.imgur.com/piX7s.png" alt="enter image description here"/pp/ppimg src="https://i.stack.imgur.com/cUfVZ.png" alt="enter image description here"/pp/pp/p/div
Answer 2: 

    
    
(Editor's Note: This answer was correct in May 2013 for Android Studio v0.1, but is no longer accurate as of July 2014, since the mentioned menu option does not exist anymore -- see this answer for up-to-date alternative).

First you will have to mark it as excluded. 
Then on right click you will be able to delete the project.




    
    
Answer 3: 

    
    
In Android Studio 1.0 - 1.1b4, I found this to be the easiest way to remove a module:


Open settings.gradle found under Gradle Scripts
Delete module's name from the include statement
Sync Project with Gradle Files
Optionally, delete it manually from the project folder


Example

Old:

include ':app', ':greendao'


New:

include ':app'

    
    
Answer 4: 

    
    
As I saw that in Android Studio 0.5.1, you have to close your project by doing simply File -/ppimg src="https://i.stack.imgur.com/4onE3.png" alt="screenshot 1"/ppimg src="https://i.stack.imgur.com/CmEM3.png" alt="enter image description here"/p/div
Answer 5: 

    
    
In Android studio v1.0.2

Method 1

Go to project structure, File -&gt; Project Structure..., as the following picture show, click - icon to remove the module.

Method 2

Edit the file settings.gradle and remove the entry you are going to delete. e.g. edit the file from include ':app', ':apple' to include ':app'.

That will work in most of the situation, however finally you have to delete the module from disk manually if you don't need it anymore.
    
    
Answer 6: 

    
    
Here is for Android studio 2.3.3
I did not find any Project Structure under File menu. 
So here are steps in pictures







    
    
Answer 7: 

    
    
Deleting is such a headache. I am posting the solution for Android Studio 1.0.2.

Step 1: Right click on the "Project Name" selected from the folder hierarchy like shown. Note: It can also be deleted from the Commander View from right hand side of your window by right clicking the project name and selecting delete from the context menu.



Step 2: The project is deleted(seemingly) but gradle seems to keep the record of the project app folder(Check it by clcking on the Gradle View). Now go to File-/strongbr/ppstrong/strongbr/ppstrong
Answer 8: 

    
    
Steps to follow Remove Modules in Android Studio:3.1.4.

Goto Project--&gt;Right Click on Module (FolderIcon-GreywithGreenColorDot)
--&gt;Load/UnLoadModules in PopUp
--&gt;Select Which Module to Unload in PopUpWindow

Again RightClick on Module (FolderIcon-OrangeColor) --&gt;Remove module.

Finally, RightClick again on Module (FolderIcon-GreyColor) --&gt;Delete.
Note:Incase Project Enabled with Git please remove module from settings.gradle, otherwise deleted module.iml will show in project module list(Reference Link).gradle.xml which is located in project/.idea/gradle.xml--remove a module from here.


Hope it helps.
Thank-you.
    
    
Answer 9: 

    
    
I'm currently running the 0.5.8 version of Android Studio and I can't even find the "Mark folder as" option when I right click, what I do is:

Right click on project -/pp/p/div
Answer 10: 

    
    

edit the project's settings.gradle file: delete the module name (, ':xxxxx') where xxxxx is the module name to be deleted
using the file explorer delete the module folder


by the way, the current version of the Android Studio (v3.1.2) throws an exception and exits the removing with an error while I'm removing the module through Module Settings =
Answer 11: 

    
    
The most reliable way I have found to do this it to go to project structure and remove it from dependencies and remove it from your setting.gradle file.

It will appear as if it is fully deleted at his point but it is not. If you try to re add the module it will say that it already exist in the project. 

The final step is to go to the location of your project using file explorer etc and delete the module.

This work 100% of the time on studio 1.3.1
    
    
Answer 12: 

    
    
Assuming the following:


You are working with Android Studio 1.2.1 or 1.2.2 (I don't have the latest yet, will edit this again when I do).
Your Project Tool Window is displaying one of the following views: "Project", "Packages", "Android" or "Project Files"


You can delete an Android Studio module as follows:


In the Project Tool Window click the module you want to delete. 
Between the Tool Bar and the Project Tool Window the tool bar you will see two "chips" that represent the path to the selected module, similar to:    your-project-name /strong/liliem/em/lili/li/ol/div
Answer 13: 

    
    
In android-studio version 2. just go

Right Click on Project--code/code
Answer 14: 

    
    
If you want to delete manually (for me it was easier), follow this:

Let's get this example with "teste". 

1 -  First change the explorer to "project" and open "settings.gradle";



2 - Delete the module you want;



3 - Go to your root folder of your project and delete the module folder.


    
    
Answer 15: 

    
    
After doing what's referred in [this answer]: https://stackoverflow.com/a/24592192/82788

Select the module(since it's still visible on the Project view),pressing Delete button on the keyboard can delete this module on disk.(Before doing what's referred in that answer, the Delete button has no effect.)
    
    
Answer 16: 

    
    
Remove from File 
Answer 17: 

    
    
To delete a module in Android Studio 2.3.3, 


Open File -&gt; Project Structure
On Project Structure window, list of modules of the current project gets displayed on left panel. Select the module which needs to be deleted.
Then click - button on top left, that means just above left panel.

    
    
Answer 18: 

    
    
In android-studio version 4.0., OS-Ubuntu-18.04., Please follow my Steps
Step-1: Right Click on Project--&gt;Open Module Option

Step-2:
Click Your Module --&gt; click (-)sign done on Top Left in PopUp, then press ok button.

Step-3: After removed module from the project

Step-4: Again do right-click in Project, Select Delete menu to Remove whole content from Disk space(i.e.folder).

Step-5: Delete the content of the module from disk by clicking done.

Hope it helps.
Thank you
    
    
Title: Things possible in IntelliJ that aren&#39;t possible in Eclipse?
Description: 
    
    
                        
            
        
            
                    
                        
                    
                
                    
                        Locked. This question and its answers are locked because the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.
                        
                    
                
            
        


    

I have heard from people who have switched either way and who swear by the one or the other.

Being a huge Eclipse fan but having not had the time to try out IntelliJ, I am interested in hearing from IntelliJ users who are "ex-Eclipsians" some specific things that you can do with IntelliJ that you can not do with Eclipse.

Note: This is not a subjective question nor at all meant to turn into an IDE holy war. Please downvote any flamebait answers.
    

        
Answer 1: 

    
    
CTRL-click works anywhere

CTRL-click that brings you to where clicked object is defined works everywhere - not only in Java classes and variables in Java code, but in Spring configuration (you can click on class name, or property, or bean name), in Hibernate (you can click on property name or class, or included resource), you can navigate within one click from Java class to where it is used as Spring or Hibernate bean; clicking on included JSP or JSTL tag also works, ctrl-click on JavaScript variable or function brings you to the place it is defined or shows a menu if there are more than one place, including other .js files and JS code in HTML or JSP files.

Autocomplete for many languagues

Hibernate

Autocomplete in HSQL expressions, in Hibernate configuration (including class, property and DB column names), in Spring configuration

&lt;property name="propName" ref="&lt;hit CTRL-SPACE&gt;"


and it will show you list of those beans which you can inject into that property. 

Java

Very smart autocomplete in Java code:

interface Person {
    String getName();
    String getAddress();
    int getAge();
}
//---
Person p;
String name = p.&lt;CTRL-SHIFT-SPACE&gt;


and it shows you ONLY getName(), getAddress() and toString() (only they are compatible by type) and getName() is first in the list because it has more relevant name. Latest version 8 which is still in EAP has even more smart autocomplete.

interface Country{
}
interface Address {
    String getStreetAddress();
    String getZipCode();
    Country getCountry();
}
interface Person {
    String getName();
    Address getAddress();
    int getAge();
}
//--- 
Person p;
Country c = p.&lt;CTRL-SHIFT-SPACE&gt;


and it will silently autocomplete it to

Country c = p.getAddress().getCountry();


Javascript

Smart autocomplete in JavaScript.

function Person(name,address) {
    this.getName = function() { return name };
    this.getAddress = function() { return address };
}

Person.prototype.hello = function() {
    return "I'm " + this.getName() + " from " + this.get&lt;CTRL-SPACE&gt;;
}


and it shows ONLY getName() and getAddress(), no matter how may get* methods you have in other JS objects in your project, and ctrl-click on this.getName() brings you to where this one is defined, even if there are some other getName() functions in your project.

HTML

Did I mention autocomplete and ctrl-clicking in paths to files, like &lt;script src="", &lt;img src="", etc?

Autocomplete in HTML tag attributes. Autocomplete in style attribute of HTML tags, both attribute names and values. Autocomplete in class attributes as well.
Type &lt;div class="&lt;CTRL-SPACE/ph3/h3p/pprecode/code/preh2/h2p/ph2/h2pem/emem/em/ph2/h2p/pp/ppem/emem/emem/emem/emem/em/ppcode/code/ph2/h2p/ppcode/code/pp/p/div
Answer 2: 

    
    
There is only one reason I use intellij and not eclipse: Usability 

Whether it is debugging, refactoring, auto-completion.. Intellij is much easier to use with consistent key bindings, options available where you look for them etc. Feature-wise, it will be tough for intellij to catch up with Eclipse, as the latter has much more plugins available that intellij, and is easily extensible.
    
    
Answer 3: 

    
    
Probably is not a matter of what can/can't be done, but how.

For instance both have editor surrounded with dock panels for project, classpath, output, structure etc. But in Idea when I start to type all these collapse automatically let me focus on the code it self; In eclipse all these panels keep open leaving my editor area  very reduced,  about 1/5 of the total viewable area. So I have to grab the mouse and click to  minimize in those panels. Doing this all day long is a very frustrating experience in eclipse.

The exact opposite thing happens with the view output window.  In Idea running a program brings the output window/panel  to see the output of the program even if it was perviously minimized.  In eclipse I have to grab my mouse again and look for the output tab and click it to view my program output, because the output window/panel is just another one, like all the rest of the windows, but in Idea it is treated in a special way: "If the user want to run his program, is very likely he wants to see the output of that program!"  It seems so natural when I write it, but eclipse fails in this basic user interface concept.

Probably there's a shortcut for this in eclipse ( autohide output window while editing and autoshow it when running the program ) , but as some other tens of features the shortcut must be hunted in forums, online help etc while in Idea is a little bit more "natural". 

This can be repeated for almost all the features both have, autocomplete, word wrap, quick documentation view, everything. I think the user experience is far more pleasant in Idea than in eclipse. Then the motto comes true "Develop with pleasure"

Eclipse handles faster larger projects ( +300 jars and +4000 classes )  and I think IntelliJ Idea 8 is working on this.

All this of course is subjective. How can we measure user experience? 
    
    
Answer 4: 

    
    
Idea 8.0 has the lovely ctrl+shift+space x 2 that does the following autocomplete:

 City city = customer.&lt;ctrl-shift-space twice&gt;


resolves to 

 City city = customer.getAddress().getCity();


through any number of levels of getters/setters.
    
    
Answer 5: 

    
    
Don't forget "compare with clipboard".

Something that I use all the time in IntelliJ and which has no equivalent in Eclipse.
    
    
Answer 6: 

    
    
My favorite shortcut in IntelliJ that has no equivalent in Eclipse (that I've found) is called 'Go to symbol'.  CTRL-ALT-SHIFT-N lets you start typing and glob up classes, method names, variable names, etc, from the entire project.  
    
    
Answer 7: 

    
    
I tried to switch to IntelliJ because of the new Android Studio. But I'm very disappointed now. I'm using Eclipse with the Code Recommanders Plugin. Here is a simple example why Eclipse is so awesome:

I want to create a new SimpleTimeZone. SimpleTimeZone has no Constructor with zero arguments.

Ctrl + Space in Eclipse



Ctrl + Space in IntelliJ



In IntelliJ I get no informations what kind of constructors SimpleTimeZone has.

After Enter in Eclipse



I get the previously selected constructor filled with predefined variable names. And I can see the type of every argument. With Code Recommanders Eclipse guesses the right constructor by the previously defined variable types in the current scope and fills the constructor with these vars.

After Enter in IntelliJ nothing happens. I get an empty constructor. I have to press Ctrl + P to see the expected arguments.


    
    
Answer 8: 

    
    
If you have the cursor on a method then CTRL+SHIFT+I will popup the method implementation. If the method is an interface method, then you can use up- and down- arrows to cycle through the implementations:

Map&lt;String, Integer&gt; m = ...
m.contains|Key("Wibble");


Where | is (for example) where your cursor is.
    
    
Answer 9: 

    
    
IntelliJ has some pretty advanced code inspections (comparable but different to FindBugs). 

Although I seriously miss a FindBugs plugin when using IntelliJ (The Eclipse/FindBugs integration is pretty cool). 

Here is an official list of CodeInspections supported by IntelliJ 

EDIT: Finally, there is a findbugs-plugin for IntelliJ. It is still a bit beta but the combination of Code Inspections and FindBugs is just awesome!
    
    
Answer 10: 

    
    
Far, far, far more refactorings.
    
    
Answer 11: 

    
    
One thing I use regularly is setting a breakpoint, but then controlling what it does. (At my last job, most everyone else used Eclipse... I remember being surprised that no one could find how to do this in Eclipse.)

For example, can have the breakpoint not actually stop, but just log a message to the console. Which means, I don't have to litter my code with "System.out.println(...)" and then recompile.
    
    
Answer 12: 

    
    
There are many things that idea solves in a much simpler way, or there's no equivalent:


Autocomplete actions: Doing ctrl+shift+a you can call any idea action from the keyboard without remembering its key combination... Think about gnome-do or launchy in windows, and you've got the idea! Also, this feature supports CamelCasing abbreviations ;)
Shelf: Lets you keep easily some pieces of code apart, and then review them through the diff viewer.
Local history: It's far better managed, and simpler.
SVN annotations and history: simpler to inspect, and also you can easily see the history only for such a part of a whole source file.
Autocomplete everywhere, such as the evaluate expression and breakpoint condition windows.
Maven integration... much, much simpler, and well integrated.
Refactors much closer to the hand, such as loops insertion, wrapping/casting, renaming, and add variables.
Find much powerful and well organized. Even in big projects
Much stable to work with several branches of a big project at the same time (as a former bugfixer of 1.5Gb by branch sources, and the need to working in them simultaneously, idea shown its rock-solid capabilities)
Cleaner and simpler interface...
And, simpler to use only with the keyboard, letting apart the need of using the mouse for lots of simple taks, saving you time and giving you more focus on the code... where it matters!


And now, being opensource... the Idea user base will grow exponentially.
    
    
Answer 13: 

    
    
Structural search and replace.

For example, search for something like:

  System.out.println($string$ + $expr$);


Where $string$ is a literal, and $expr$ is an expression of type my.package.and.Class, and then replace with:

  $expr$.inspect($string$);

    
    
Answer 14: 

    
    
My timing may be a little off in terms of this thread, but I just had to respond.

I am a huge eclipse fan -- using it since it's first appearance. A friend told me then (10+ years ago) that it would be a player. He was right.

However! I have just started using IntelliJ and if you haven't seen or used changelists -- you are missing out on programming heaven.

The ability to track my changed files (on my development branch ala clearcase) was something I was looking for in a plugin for eclipse. Intellij tracks all of your changes for a single commit, extremely easy. You can isolate changed files with custom lists. I use that for configuration files that must be unique locally, but are constantly flagged when I sync or compare against the repository -- listing them under a changelist, I can monitor them, but neatly tuck them away so I can focus on the real additions I am making.

Also, there's a Commit Log plugin that outputs a text of all changes for those SCCS that aren't integrated with your bug tracking software. Pasting the log into a ticket's work history captures the files, their version, date/time, and the branch/tags. It's cool as hell.

All of this could be supported via plugins (or future enhancements) in eclipse, I wager; yet, Intellij makes this a breeze. 

Finally, I am really excited about the mainstream love for this product -- the keystrokes, so it's painful, but fun.
    
    
Answer 15: 

    
    
The IntelliJ debugger has a very handy feature called "Evaluate Expression", that is by far better than eclipses pendant. It has full code-completion and i concider it to be generally "more useful".
    
    
Answer 16: 

    
    
Well, for me it's a thousand tiny things. Some of the macros, the GUI layout in general in Eclipse I find awful. I can't open multiple projects in different windows in Eclipse. I can open multiple projects, but then it's view based system swaps a bunch of things around on me when I switch files. IntelliJ's code inspections seem better. Its popup helpers to fix common issues is nice. Lots of simple usability things like the side bar where I can hover over a hot spot and it'll tell me every implementing subclass of a method or the method I'm implementing and from where. 

Whenever I've had to use, or watch someone use, Eclipse it seems like they can do most of the things I can do in IntelliJ, but it takes them longer and it's clunkier. 
    
    
Answer 17: 

    
    
Introduce variable. (Ctrl+Alt+V on Windows, Cmd+Alt+V on OSX)

Lets say you call a method, service.listAllPersons()
Hit Ctrl+Alt+V and Enter, and variable for return value from method call is inserted:

List&lt;Person&gt; list = service.listAllPersons();


Saves you typing, and you don't have to check the return type of the method you are calling. Especially useful when using generics, e.g.

new ArrayList&lt;String&gt;()


[introduce variable]

ArrayList&lt;String&gt; stringArrayList = new ArrayList&lt;String&gt;();


(of course you can easily change the name of the variable before hitting Enter)
    
    
Answer 18: 

    
    
IntelliJ has intellisense and refactoring support from code into jspx documents.
    
    
Answer 19: 

    
    
For me, it's IDEA's maven support, especially in version 9 is second to none. The on-the-fly synchronizing of the project to the maven model is just fantastic and makes development pleasant. 
    
    
Answer 20: 

    
    
Intellij has a far superior SVN plug-in than either Subversive or Subclipse and it works! The amount of time we've wasted merging source files using Eclipse doesn't bear thinking about. This isn't an issue with IntelliJ because the plugin helps you much more. 

Also the Subclipse plugin is unreliable - we regularly have instances where the plugin doesn't think there has been any code checked in to SVN by other developers, but there has - the CI server has processed them!
    
    
Answer 21: 

    
    
VIM Emulator. This plugin provides nearly complete vi/vim/gvim emulation while editing files in IDEA.
        The following functionality is supported:
         
            Motion keys 
            Deletion/Changing 
            Insert mode commands 
            Marks 
            Registers 
            VIM undo/redo 
            Visual mode commands 
            Some Ex commands 
            Some :set options 
            Full VIM regular expressions for search and search/replace 
            Macros 
            Diagraphs 
            Command line history 
            Search history 
            Jumplists 
            VIM help 
         

some comments about this plugin from http://plugins.jetbrains.net/plugin/?id=164

 
                       
                          
                          I can't see ever going back to any other ide because of this plugin.. 
                       
                       
                        
                          Best of both worlds... Awesome!. 
                       
                       
                         
                          that's what i was lacking in all IDEs. 
                       

    
    
Answer 22: 

    
    
One of the good points in my opinion is the Dependency Structure Matrix:
http://www.jetbrains.com/idea/features/dependency_analysis.html#link0

There's a good introduction to DSM usage and benefits in Lattix' website (a standalone product):
http://www.lattix.com/files/dl/slides/s.php?directory=4tour
    
    
Answer 23: 

    
    
A few other things:


propagate parameters/exceptions when
changing method signature, very
handy for updating methods deep
inside the call stack
SQL code validation in the strings passed as arguments to jdbc calls
(and the whole newly bundled
language injection stuff)
implemented in/overwritten in icons for interfaces &amp; classes (and their methods) and
the smart implementation navigation
(Ctrl+Alt+Click or Ctrl+Alt+B)
linking between the EJB 2.1 interfaces and bean classes
(including refactoring support); old
one, but still immensely valuable
when working on older projects

    
    
Answer 24: 

    
    
Two things that IntelliJ does that Eclipse doesn't that are very valuable to me:

Method separators: those faint gray lines between methods make code much more readable

Text anti-aliasing: makes code look so nice in the IDE
    
    
Answer 25: 

    
    
One very useful feature is the ability to partially build a Maven reactor project so that only the parts you need are included. 

To make this a little clearer, consider the case of a collection of WAR files with a lot of common resources (e.g. JavaScript, Spring config files etc) being shared between them using the overlay technique. If you are working on some web page (running in Jetty) and want to change some of the overlay code that is held in a separate module then you'd normally expect to have to stop Jetty, run the Maven build, start Jetty again and continue. This is the case with Eclipse and just about every other IDE I've worked with. Not so in IntelliJ. Using the project settings you can define which facet of which module you would like to be included in a background build. Consequently you end up with a process that appears seamless. You make a change to pretty much any code in the project and instantly it is available after you refresh the browser.

Very neat, and very fast.

I couldn't imagine coding a front end in something like YUI backing onto DWR/SpringMVC without it.
    
    
Answer 26: 

    
    
Preamble to my answer: My use of Eclipse is limited. We needed a Java IDE to work on both Windows and Mac and the Mac port slowed down day by day. This was years ago and I'm sure it's OK now. But that is what got us to switch to IntelliJ and we've been happy with it.

Now for my answer: One big difference I haven't seen mentioned yet is that tech support is better with IntelliJ/Jet Brains. We send an e-mail to JetBrains and get a definitive answer back in less than an hour. Looking for answers to Eclipse problems results in the usual, "You stupid idiot" answers (usually a small number of the replies) along with the much larger number of insightful, helpful replies. But it takes some sorting through to get the real answer.
    
    
Answer 27: 

    
    
Something which I use in IntelliJ all the time is refactoring as I type.  I have re-written classes from a printout (originally written in eclipse) using both IDEs and I used about 40% less key strokes/mouse clicks to write the same classes in IntelliJ than eclipse.

I wouldn't want to use Eclipse until they support as much refactoring with incomplete pieces of code.

Here is a longer list of features in IntelliJ 8.0/8.1 [http://www.jetbrains.com/idea/features/index.html]
    
    
Answer 28: 

    
    
There is one thing that IntelliJ does much much better than Eclipse and that is empty your pockets! 

I do however prefer using it and one big advantage it has over Eclipce is the way it synchronises with the file system, for big projects and slow computers (yes in work environments the PC's are a lot slower than our ones at home) Eclipse seems to struggle where IntelliJ seems to be quicker albeit with a slower initial indexing time.

IntelliJ Community edition obviously makes using it free but you soon want those extra refactoring and nice little goodies not included in the CC edition.

In my opinion, its generally a better user experience but whether its worth the cost is a question for each developer to answer themselves. 

But lets be grateful we have up to three great IDEs for Java right now with NetBeans getting better all the time. 
    
    
Answer 29: 

    
    
Data flow analysis : inter-procedural backward flow analysis and forward flow analysis, as described here. My experiences are based on Community Edition, which does data flow analysis fairly well. It has failed (refused to do anything) in few cases when code is very complex.
    
    
Answer 30: 

    
    
First of all I love intellij.  There are at least a hundred features it has that eclipse lack.  I'm talking magnitudes better in reliability and intelligence that no hyperbole can describe when it comes to refactoring, renaming, moving and others which have already been mentioned.

BUT, there is one thing that intellij does not allow which eclipse does.  It does not allow running multiple projects at once under the same vm.  

When you have separate projects for the front, middle, core, agents..etc, where they all have to interact with each other, you can not quickly modify and debug at the same time, afaik. The only way I current cope with this is to use ant scripts to deploy and update jars in dependent projects, or use maven. 

Eclipse allows multiple projects to be debugged under one ide vm instance. 
    
    
Title: How do I enable the column selection mode in Eclipse?
Description: 
    
    
                    
News wrote that Eclipse 3.5 finally supports column selection. 
Unfortunately I don't know HOW to enable it. I tried pressing the ALT-key like I am used to in Visual Studio and all other Microsoft products but that had no effect. 

How can I mark a vertical block in Eclipse? 
    

        
Answer 1: 

    
    
To activate the cursor and select the columns you want to select use: 


  Windows:
  Alt+Shift+A
  
  Mac: command + option + A
  
  Linux-based OS:
  Alt+Shift+A


To deactivate, press the keys again.

This information was taken from DJ's Java Blog.
    
    
Answer 2: 

    
    
On Windows and Linux, it's AltShiftA, as RichieHindle pointed out.  On OSX it's OptionCommandA (⌘⌥A).  It's also worth noting that the two modes can have different font preferences, so if you've changed the default text font, it can be jarring to toggle block selection modes and see the font change.

Finally, the "search commands" (Ctrl3 or Command3) pop-up will find it for you if you type block.  This is useful if you use the feature just frequently enough to forget the hotkey.
    
    
Answer 3: 

    
    
As RichieHindle pointed out the shortcut for column (block) selection is Alt+Shift+A. The problem I ran into is that the Android SDK on Eclipse uses 3 shortcuts that all start with Alt+Shift+A, so if you type that, you'll be given a choice of continuing with D, S, or R.

To solve this I redefined the column selection as Alt+Shift+A,A (Alt, Shift, A pressed together and then followed by a subsequent A). To do this go to Windows &gt; Preferences then type keys or navigate to General &gt; Keys. Under the Keys enter the filter text of block selection to quickly find the shortcut listing for toggle block selection. Here you can adjust the shortcut for column selection as you wish.
    
    
Answer 4: 

    
    
First of all your mouse key must be focus in editor to enable Toggle Block Selection Mode



Click on toggleButton as shown in figure and it will enable Vertical selection. After selection toggle it again.
    
    
Answer 5: 

    
    
Additionally, you can change the keys view window -/p/div
Answer 6: 

    
    
You can enable and disable column editing mode via the keyboard shortcut ALT-SHIFT-A.  

Once enabled you can then use either the mouse to select a block of text, or the keyboard using SHIFT (like a normal keyboard select, except the selection will now be in a block).  

If you've changed your default font for text editing, entering column editing mode will probably change your screen font to the default column editing font (which is probably different to your changed font.  To change the font when in column editing mode, go to the menu and select Window -&gt; Preferences, then in the tree on the left hand side, pick General -&gt; Appearance -&gt; Colors and Fonts, and then pick Basic -&gt; Text Editor Block Selection Font on the right hand side tree.  You can then select the font to be consistent with your "not in column editing mode" font.
    
    
Answer 7: 

    
    
A different approach:

The vrapper plugin emulates vim inside the Eclipse editor. One of its features is visual block mode which works fine inside Eclipse.

It is by default mapped to Ctrl-V which interferes with the paste command in Eclipse. You can either remap the visual block mode to a different shortcut, or remap the paste command to a different key. I chose the latter: remapped the paste command to Ctrl-Shift-V to match my terminal's behavior. 
    
    
Answer 8: 

    
    

Press Alt + Shift + A
Observe that the screen zooms out
Make selection using the mouse
Press Alt + Shift + A to go back to the old mode.


    
    
Title: How to clear gradle cache?
Description: 
    
    
                    
I'm trying to use Android Studio, and the first time I boot it up, it takes like 45 MINUTES to compile... If I don't quit the application, it is okay - each subsequent compilation/running the app will take around 45 seconds.

I've tried to check some of my caches: there's a .gradle/caches folder in my home directory, and it's contains 123 MB.

There's also a .gradle folder in my project folder... one of the taskArtifacts was like 200 MB. I'm scared to just randomly nuke them both. What parts of the folders are safe to delete?

Is there a better explanation for why my Android Studio is taking forever to run the gradle assemble task upon first time loading the application?

Do I also have to clear the intellij cache too?
    

        
Answer 1: 

    
    
As @Bradford20000 pointed out in the comments, there might be a gradle.properties file as well as global gradle scripts located under $HOME/.gradle. In such case special attention must be paid when deleting the content of this directory.

The .gradle/caches directory holds the Gradle build cache. So if you have any error about build cache, you can delete it.
    
    
Answer 2: 

    
    
Gradle cache locates at 


On Windows: %USER_HOME%\.gradle/caches/
On Mac/Unix: ~/.gradle/caches/


You can browse to these directory and manually delete it or run 

rm -rf $HOME/.gradle/caches/


on Unix system. Run this command will also force to download dependencies.

Update 2: Clear the Android build cache of current project 

Note: Android Studio's File | Invalidate Caches/Restart doesn't clear the Android build cache, so you'll have to clean it separately.

On Windows:

gradlew cleanBuildCache


On Mac or Linux:

./gradlew cleanBuildCache

    
    
Answer 3: 

    
    
EDIT: cleanBuildCache no longer works

android gradle plugin now utilizes gradle cache feature

REF:  https://guides.gradle.org/using-build-cache/


  TO CLEAR CACHE  
  
  Clean the cache directory to avoid any hits from previous builds

 rm -rf $GRADLE_HOME/caches/build-cache-*



REF: https://guides.gradle.org/using-build-cache/#caching_android_projects

OTHER DIGRESSIONS 

see here (including edits).

================

OBSOLETE INFO:

Newest solution using gradle task 

cleanBuildCache

available via android plugin for Gradle, revision 2.3.0 (February 2017)

Dependencies: 


Gradle 3.3 or higher.
Build Tools 25.0.0 or higher.


more at:

https://developer.android.com/studio/build/build-cache.html#clear_the_build_cache

background 

Build cache:

stores certain outputs that the Android plugin generates when building your project (such as unpackaged AARs and pre-dexed remote dependencies). Your clean builds are much faster while using the cache because the build system can simply reuse those cached files during subsequent builds, instead of recreating them. Projects using Android plugin 2.3.0 and higher use the build cache by default. To learn more, read Improve Build Speed with Build Cache.

Note: The cleanBuildCache task is not available if you disable the build cache.

usage:

windows 

gradlew cleanBuildCache


linux / mac

gradle cleanBuildCache


Android Studio / IntelliJ

gradle tab (default on right) select and run the task or add it via the configuration window 


**gradle/gradlew are system specific files containing scripts 
- please see system info how to execute the script 


linux  - https://www.cyberciti.biz/faq/howto-run-a-script-in-linux/
windows - https://technet.microsoft.com/en-us/library/bb613481(v=vs.85).aspx
mac https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html

    
    
Answer 4: 

    
    
Take care with gradle daemon, you have to stop it before clear and re-run gradle.

Stop first daemon:

./gradlew --stop


Clean cache using:

rm -rf ~/.gradle/caches/


Run again you compilation
    
    
Answer 5: 

    
    
The gradle daemon also creates a many large text files of every single build log. They are stored here:


  ~/.gradle/daemon/X.X/daemon-XXXX.out.log


"X.X" is the gradle version in use, like "4.4", and "XXXX" are just random numbers, like "1234".

The total size can grow to several hundred MB in just a few months. There is no way to disable the logging, and the files are not automatically deleted and they do not really need to be retained.

But you can create a small gradle task to automatically delete them, and free up lots of disk space:

Add this to your app/build.gradle:

android {

    buildTypes {
        ...
    }

    // Delete large build log files from ~/.gradle/daemon/X.X/daemon-XXX.out.log
    // Source: https://discuss.gradle.org/t/gradle-daemon-produces-a-lot-of-logs/9905
    def gradle = project.getGradle()
    new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
        if (it.getName().endsWith('.out.log')) {
            // println("Deleting gradle log file: $it") // Optional debug output
            it.delete()
        }
    }
}


To see which files are being deleted, you can see the debug output in Android Studio -
Answer 6: 

    
    
there seems to be incorrect info posted here. some people report on how to clear the Android builder cache (with task cleanBuildCache) but do not seem to realize that said cache is independent of Gradle's build cache, AFAIK.

my understanding is that Android's cache predates (and inspired) Gradle's, but i could be wrong. whether the Android builder will be/was updated to use Gradle's cache and retire its own, i do not know.

EDIT: the Android builder cache is obsolete and has been eliminated. the Android Gradle plugin now uses Gradle's build cache instead. to control this cache you must now interact with Gradle's generic cache infrastructure.

TIP: search for Gradle's cache help online without mentioning the keyword 'android' to get help for the currently relevant cache.

EDIT 2: due to tir38's question in a comment below, i am testing using an Android Gradle plugin v3.4.2 project. the gradle cache is enabled by org.gradle.caching=true in gradle.properties. i do a couple of clean build and the second time most tasks show FROM-CACHE as their status, showing that the cache is working.

surprisingly, i have a cleanBuildCache gradle task and a &lt;user-home&gt;/.android/build-cache/3.4.2/ directory, both hinting the existence of an Android builder cache.

i execute cleanBuildCache and the 3.4.2/ directory is gone. next i do another clean build:


nothing changed: most tasks show FROM-CACHE as their status and the build completed at cache-enabled speeds.
the 3.4.2/ directory is recreated.
the 3.4.2/ directory is empty (save for 2 hidden, zero length marker files).


conclusions:


caching of all normal Android builder tasks is handled by Gradle.
executing cleanBuildCache does not clear or affect the build cache in any way.
there is still an Android builder cache there. this could be vestigial code that the Android build team forgot to remove, or it could actually cache something strange that for whatever reason has not or cannot be ported to using the Gradle cache. (the 'cannot' option being highly improvable, IMHO.)


next, i disable the Gradle cache by removing org.gradle.caching=true from gradle.properties and i try a couple of clean build:


the builds are slow.
all tasks show their status as being executed and not cached or up to date.
the 3.4.2/ directory continues to be empty.


more conclusions:


there is no Android builder cache fallback for when the Gradle cache fails to hit.
the Android builder cache, at least for common tasks, has indeed been eliminated as i stated before.
the relevant android doc contains outdated info. in particular the cache is not enabled by default as stated there, and the Gradle cache has to be enabled manually.


EDIT 3: user tir38 confirmed that the Android builder cache is obsolete and has been eliminated with this find. tir38 also created this issue. thanks!
    
    
Answer 7: 

    
    
Command: rm -rf ~/.gradle/caches/
    
    
Title: Adding a guideline to the editor in Visual Studio
Description: 
    
    
                    
Introduction

I've always been searching for a way to make Visual Studio draw a line after a certain amount of characters.

Below is a guide to enable these so called guidelines for various versions of Visual Studio.

Visual Studio 2013

Install Paul Harrington's Editor Guidelines extension for VS 2013

Visual Studio 2010 and 2012


Install Paul Harrington's Editor Guidelines extension for VS 2010 or VS 2012.
Open the registry at:
VS 2010: HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\10.0\Text Editor
VS 2012: HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\11.0\Text Editor
and add a new string called Guides with the value RGB(100,100,100), 80. The 
first part specifies the color, while the other one (80) is the column the line will be displayed.
Or install the Guidelines UI extension (which is also a part of the Productivity Power Tools), which will add entries to the editor's context menu for adding/removing the entries without needing to edit the registry directly. The current disadvantage of this method is that you can't specify the column directly.


Visual Studio 2008 and Other Versions

If you are using Visual Studio 2008 open the registry at HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\9.0\Text Editor and add a new string called Guides with the value RGB(100,100,100), 80. The first part specifies the color, while the other one (80) is the column the line will be displayed. The vertical line will appear, when you restart Visual Studio.

This trick also works for various other version of Visual Studio, as long as you use the correct path:

2003: HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\7.1\Text Editor
2005: HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\8.0\Text Editor
2008: HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\9.0\Text Editor
2008 Express: HKEY_CURRENT_USER\Software\Microsoft\VCExpress\9.0\Text Editor


This also works in SQL Server 2005 and probably other versions.
    

        
Answer 1: 

    
    
This is originally from Sara's blog.

It also works with almost any version of Visual Studio, you just need to change the "8.0" in the registry key to the appropriate version number for your version of Visual Studio.

The guide line shows up in the Output window too. (Visual Studio 2010 corrects this, and the line only shows up in the code editor window.)

You can also have the guide in multiple columns by listing more than one number after the color specifier:

RGB(230,230,230), 4, 80


Puts a white line at column 4 and column 80. This should be the value of a string value Guides in "Text Editor" key (see bellow).

Be sure to pick a line color that will be visisble on your background. This color won't show up on the default background color in VS. This is the value for a light grey: RGB(221, 221, 221).

Here are the registry keys that I know of:

Visual Studio 2010: HKCU\Software\Microsoft\VisualStudio\10.0\Text Editor

Visual Studio 2008: HKCU\Software\Microsoft\VisualStudio\9.0\Text Editor

Visual Studio 2005: HKCU\Software\Microsoft\VisualStudio\8.0\Text Editor

Visual Studio 2003: HKCU\Software\Microsoft\VisualStudio\7.1\Text Editor

For those running Visual Studio 2010, you may want to install the following extensions rather than changing the registry yourself:


http://visualstudiogallery.msdn.microsoft.com/en-us/0fbf2878-e678-4577-9fdb-9030389b338c
http://visualstudiogallery.msdn.microsoft.com/en-us/7f2a6727-2993-4c1d-8f58-ae24df14ea91


These are also part of the Productivity Power Tools, which includes many other very useful extensions.
    
    
Answer 2: 

    
    
Without the need to edit any registry keys, the Productivity Power Tools extension (available for all versions of visual studio) provides guideline functionality.

Once installed just right click while in the editor window and choose the add guide line option. Note that the guideline will always be placed on the column where your editing cursor is currently at, regardless of where you right click in the editor window.



To turn off go to options and find Productivity Power Tools and in that section turn off Column Guides. A reboot will be necessary.


    
    
Answer 3: 

    
    
Visual Studio 2017 / 2019

For anyone looking for an answer for a newer version of Visual Studio, install the Editor Guidelines plugin, then right-click in the editor and select this:


    
    
Answer 4: 

    
    
There is now an extension for Visual Studio 2012 and 2013:

http://visualstudiogallery.msdn.microsoft.com/da227a0b-0e31-4a11-8f6b-3a149cf2e459
    
    
Answer 5: 

    
    
If you are a user of the free Visual Studio Express edition the right key is in 

HKEY_CURRENT_USER\Software\Microsoft\VCExpress\9.0\Text Editor


{note the VCExpress instead of VisualStudio) but it works! :)
    
    
Answer 6: 

    
    
This will also work in Visual Studio 2010 (Beta 2), as long as you install Paul Harrington's extension to enable the guidelines from the VSGallery or from the extension manager inside VS2010.  Since this is version 10.0, you should use the following registry key:

HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\10.0\Text Editor


Also, Paul wrote an extension that adds entries to the editor's context menu for adding/removing the entries without needing to edit the registry directly.  You can find it here: http://visualstudiogallery.msdn.microsoft.com/en-us/7f2a6727-2993-4c1d-8f58-ae24df14ea91
    
    
Answer 7: 

    
    
This works for SQL Server Management Studio also.
    
    
Answer 8: 

    
    
I found this Visual Studio 2010 extension: Indent Guides

http://visualstudiogallery.msdn.microsoft.com/e792686d-542b-474a-8c55-630980e72c30

It works just fine.

    
    
Answer 9: 

    
    
With VS 2013 Express this key does not exist. What I see is HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\12.0 and there is no mention of Text Editor under that.
    
    
Answer 10: 

    
    
For those who use Visual Assist, vertical guidelines can be enabled from Display section in Visual Assist's options:


    
    
Answer 11: 

    
    
The registry path for Visual Studio 2008 is the same, but with 9.0 as the version number:

HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\9.0\Text Editor

    
    
Answer 12: 

    
    
For VS 2019 just use this powershell script:
Get-ChildItem &quot;$($env:LOCALAPPDATA)\Microsoft\VisualStudio\16.0_*&quot; | 
Foreach-Object {
  $dir = $_;
  $regFile = &quot;$($dir.FullName)\privateregistry.bin&quot;;
  Write-Host &quot;Loading $($dir.BaseName) from ``$regFile``&quot;
  &amp; reg load &quot;HKLM\_TMPVS_&quot; &quot;$regFile&quot;
  New-ItemProperty -Name &quot;Guides&quot; -Path &quot;HKLM:\_TMPVS_\Software\Microsoft\VisualStudio\$($dir.BaseName)\Text Editor&quot; -Value &quot;RGB(255,0,0), 80&quot; -force | Out-Null;
   
  Sleep -Seconds 5; # might take some time befor the file can be unloaded
  &amp; reg unload &quot;HKLM\_TMPVS_&quot;;
  Write-Host &quot;Unloaded $($dir.BaseName) from ``$regFile``&quot;
}

    
    
